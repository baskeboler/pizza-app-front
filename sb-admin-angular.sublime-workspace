{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"con",
				"controller	AngularJS"
			],
			[
				"use",
				"usemin"
			],
			[
				"toS",
				"toStateParams"
			],
			[
				"to",
				"toState"
			],
			[
				"ng-c",
				"ng-click	AngularJS"
			],
			[
				"$lo",
				"$log	AngularJS"
			],
			[
				"ng-cl",
				"ng-cloak	AngularJS"
			],
			[
				"ng-",
				"ng-cloak	AngularJS"
			],
			[
				"req",
				"requestError"
			],
			[
				"de",
				"defaults"
			],
			[
				"$http",
				"$httpProvider"
			],
			[
				"login",
				"loginInterceptor	AngularJS"
			],
			[
				"$oot",
				"$rootScope	AngularJS"
			],
			[
				"$loca",
				"$location	AngularJS"
			],
			[
				"fun",
				"fun	Function"
			],
			[
				"$sta",
				"$stateParams"
			],
			[
				"hea",
				"headers"
			],
			[
				"c",
				"common"
			],
			[
				"$htt",
				"$httpProvider"
			],
			[
				"hand",
				"handleError"
			],
			[
				"se",
				"services"
			],
			[
				"load",
				"load"
			],
			[
				"han",
				"handleError"
			],
			[
				"re",
				"resolve"
			],
			[
				"au",
				"_authenticated"
			],
			[
				"auth",
				"authorize"
			],
			[
				"retu",
				"returnToState"
			],
			[
				"$root",
				"$rootScope	AngularJS"
			],
			[
				"is",
				"isInRole"
			],
			[
				"isI",
				"isInRole"
			],
			[
				"$inter",
				"$interval	AngularJS"
			],
			[
				"cargar",
				"cargarPedidos"
			],
			[
				"lis",
				"listaPendientes"
			],
			[
				"contro",
				"controllerAs"
			],
			[
				"tem",
				"templateUrl"
			],
			[
				"l",
				"listaPendientes"
			],
			[
				"get",
				"getPedidosPendientes"
			],
			[
				"ui",
				"ui-select-choices"
			],
			[
				"ng-bind",
				"ng-bind-html	AngularJS"
			],
			[
				"ng",
				"ng-bind	AngularJS"
			],
			[
				"ui-select",
				"ui-select-match"
			],
			[
				"$sce",
				"angular: $sce"
			],
			[
				"ng-bi",
				"ng-bind-html	AngularJS"
			],
			[
				"_re",
				"_reduce	Reduces a collection to a value which is the accumulated result of running each element in the collection through the callback."
			],
			[
				"_",
				"_map	Creates an array of values by running each element in the collection through the callback."
			],
			[
				"cl",
				"clearForm"
			],
			[
				"ped",
				"pedido"
			],
			[
				"ca",
				"cargarClientes"
			],
			[
				"item",
				"item"
			],
			[
				"carg",
				"cargarPlatos"
			],
			[
				"remove",
				"removeBebida"
			],
			[
				"ng-re",
				"ng-repeat	AngularJS"
			],
			[
				"carga",
				"cargarListaBebidas"
			],
			[
				"Beb",
				"BebidasCtrl"
			],
			[
				"Be",
				"BebidasCtrl"
			],
			[
				"pro",
				"productos"
			],
			[
				"$sc",
				"$scope	AngularJS"
			],
			[
				"loadMy",
				"loadMyFiles"
			],
			[
				"loadC",
				"loadChartLib"
			],
			[
				"build",
				"buildcontrol"
			],
			[
				"active",
				"activeItem"
			],
			[
				"ng-op",
				"ng-options	AngularJS"
			],
			[
				"todo",
				"todoType"
			],
			[
				"line",
				"lineChart"
			],
			[
				"la",
				"latestResult"
			],
			[
				"time",
				"timestamp"
			],
			[
				"small",
				"small	Tag"
			],
			[
				"div",
				"div	Tag"
			],
			[
				"section",
				"section	Tag"
			],
			[
				"sec",
				"section	Tag"
			],
			[
				"fw",
				"fw-b	font-weight: bold;"
			],
			[
				"fs",
				"fst-uc	font-stretch: ultra-condensed;"
			],
			[
				"tite",
				"title	Attr"
			],
			[
				"styl",
				"style	Attr"
			],
			[
				"style",
				"style	<style>"
			],
			[
				"gr",
				"gridData"
			],
			[
				"gri",
				"gridData"
			],
			[
				"cn",
				"controller	AngularJS"
			],
			[
				"nv",
				"nvd3"
			],
			[
				"scope",
				"$scope	AngularJS"
			],
			[
				"bac",
				"background-size"
			],
			[
				"pos",
				"pos-a	position: absolute;"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app/productos/views/bebidas.html",
			"settings":
			{
				"buffer_size": 2013,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/views/dashboard/main.html",
			"settings":
			{
				"buffer_size": 441,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/pedidos/views/pedidos.list.html",
			"settings":
			{
				"buffer_size": 3051,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/security/services/Principal.js",
			"settings":
			{
				"buffer_size": 1919,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/security/services/Authorization.js",
			"settings":
			{
				"buffer_size": 765,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bower.json",
			"settings":
			{
				"buffer_size": 967,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Gruntfile.js",
			"settings":
			{
				"buffer_size": 10951,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/productos/views/modals/crear-bebida-modal.html",
			"settings":
			{
				"buffer_size": 974,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "(function() {\n	'use strict';\n\n	angular.module('sbAdminApp')\n		.controller('CrearBebidaModalInstanceController', CrearBebidaModalInstanceController);\n\n	function CrearBebidaModalInstanceController() {\n		var vm = this;\n		vm.nueva = {};\n		vm.crearBebida = crearBebida;\n		vm.cancelar = cancelar;\n	}\n})();",
			"file": "app/productos/js/controllers/modals/CrearBebidaModalInstanceCtrl.js",
			"file_size": 0,
			"file_write_time": 130745746250856988,
			"settings":
			{
				"buffer_size": 299,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "{\n	// A list of URLs that each contain a JSON file with a list of repositories.\n	// The repositories from these channels are placed in order after the\n	// repositories from the \"repositories\" setting\n	\"channels\": [\n		\"https://packagecontrol.io/channel_v3.json\"\n	],\n\n	// A list of URLs that contain a packages JSON file. These repositories\n	// are placed in order before repositories from the \"channels\"\n	// setting\n	\"repositories\": [],\n\n	// A list of packages to install pre-release versions for. Versions\n	// under 1.0.0 are not considered pre-release, only those using the SemVer\n	// -prerelease suffixes will be ignored if the package is not in this\n	// list.\n	\"install_prereleases\": [],\n\n	// If debugging information for HTTP/HTTPS connections should be printed\n	// to the Sublime Text console\n	\"debug\": false,\n\n	// This helps solve naming issues where a repository it not named the\n	// same as the package should be. This is primarily only useful for\n	// GitHub and BitBucket repositories. This mapping will override the\n	// mapping that is retrieved from the repository channels.\n	\"package_name_map\": {},\n\n	// If package install, upgrade and removal info should be submitted to\n	// the channel for aggregated statistics\n	\"submit_usage\": true,\n\n	// The URL to post install, upgrade and removal notices to\n	\"submit_url\": \"https://packagecontrol.io/submit\",\n\n	// If packages should be automatically upgraded when ST starts\n	\"auto_upgrade\": true,\n\n	// If missing packages should be automatically installed when ST starts\n	\"install_missing\": true,\n\n	// If a package was installed by Package Control (has a\n	// package-metadata.json file) but is not in installed_packages, remove it\n	// based upon the assumption that it was removed on another machine and\n	// the Package Control.sublime-settings file was synced to this machine.\n	\"remove_orphaned\": true,\n\n	// The minimum frequency in hours in which to check for automatic upgrades,\n	// setting this to 0 will always check for automatic upgrades\n	\"auto_upgrade_frequency\": 1,\n\n	// Packages to not auto upgrade\n	\"auto_upgrade_ignore\": [],\n\n	// Timeout for downloading channels, repositories and packages. Doesn't\n	// have an effect on Windows due to a bug in WinINet.\n	\"timeout\": 30,\n\n	// The number of seconds to cache repository and package info for\n	\"cache_length\": 300,\n\n	// An HTTP proxy server to use for requests. Not normally used on Windows\n	// since the system proxy configuration is utilized via WinINet. However,\n	// if WinINet is not working properly, this will be used by the Urllib\n	// downloader, which acts as a fallback.\n	\"http_proxy\": \"\",\n	// An HTTPS proxy server to use for requests - this will inherit from\n	// http_proxy if it is set to \"\" or null and http_proxy has a value. You\n	// can set this to false to prevent inheriting from http_proxy. Not\n	// normally used on Windows since the system proxy configuration is\n	// utilized via WinINet. However, if WinINet is not working properly, this\n	// will be used by the Urllib downloader, which acts as a fallback.\n	\"https_proxy\": \"\",\n\n	// Username and password for both http_proxy and https_proxy. May be used\n	// with WinINet to set credentials for system-level proxy config.\n	\"proxy_username\": \"\",\n	\"proxy_password\": \"\",\n\n	// If HTTP responses should be cached to disk\n	\"http_cache\": true,\n\n	// Number of seconds to cache HTTP responses for, defaults to one week\n	\"http_cache_length\": 604800,\n\n	// User agent for HTTP requests. If \"%s\" is present, will be replaced\n	// with the current version.\n	\"user_agent\": \"Package Control v%s\",\n\n	// Setting this to true will cause Package Control to ignore all git\n	// and hg repositories - this may help if trying to list packages to install\n	// hangs\n	\"ignore_vcs_packages\": false,\n\n	// Custom path(s) to \"git\" binary for when it can't be automatically\n	// found on the system and a package includes a .git metadata directory.\n	// Supports more than one path to allow users to sync settings across\n	// operating systems.\n	\"git_binary\": [],\n\n	// This should NOT contain the name of the remote or branch - that will\n	// be automatically determined.\n	\"git_update_command\": [\"pull\", \"--ff\", \"--commit\"],\n\n	// Custom path(s) to \"hg\" binary for when it can't be automatically\n	// found on the system and a package includes a .hg metadata directory.\n	// Supports more than one path to allow users to sync settings across\n	// operating systems.\n	\"hg_binary\": [],\n\n	// For HG repositories, be sure to use \"default\" as the remote URL.\n	// This is the default behavior when cloning an HG repo.\n	\"hg_update_command\": [\"pull\", \"--update\"],\n\n	// Additional packages to ignore when listing unmanaged packages.\n	\"unmanaged_packages_ignore\": [],\n\n	// Directories to ignore when creating a package\n	\"dirs_to_ignore\": [\n		\".hg\", \".git\", \".svn\", \"_darcs\", \"CVS\"\n	],\n\n	// Files to ignore when creating a package\n	\"files_to_ignore\": [\n		\"*.pyc\", \".hgignore\", \".gitignore\", \".bzrignore\",\n		\"*.sublime-project\", \"*.sublime-workspace\", \"*.tmTheme.cache\"\n	],\n\n	// Files to include, even if they match a pattern in files_to_ignore\n	\"files_to_include\": [],\n\n	// When a package is created, copy it to this folder - defaults to Desktop\n	\"package_destination\": \"\",\n\n	// A way to create different packaging profiles for different types of\n	// package releases, such as for different platforms or binary-only\n	// releases.\n	//\n	// The key of the object will be the profile name and a list of them will\n	// be presenting when running the \"Create Package File\" command. The\n	// profile \"Default\" will use the top-level version on the following\n	// settings:\n	//\n	// - \"dirs_to_ignore\"\n	// - \"files_to_ignore\"\n	// - \"files_to_include\"\n	// - \"package_destination\"\n	//\n	// If a profile does not include one of those three setting, it will fall\n	// back to the top-level settings.\n	\"package_profiles\": {\n		\"Binaries Only\": {\n			// Exclude all .py files, but consequently include all .pyc files\n			\"files_to_ignore\": [\n				\"*.py\", \".hgignore\", \".gitignore\", \".bzrignore\",\n				\"*.sublime-project\", \"*.sublime-workspace\", \"*.tmTheme.cache\"\n			],\n\n			// Include __init__.py so Sublime Text will load the package\n			\"files_to_include\": [\n				\"__init__.py\"\n			]\n		}\n	},\n\n	// Enable the ability to run the tests - this is only for development\n	\"enable_tests\": false\n}\n",
			"file": "/home/victor/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 6287,
				"line_ending": "Unix",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "// Place your settings in the file \"User/Preferences.sublime-settings\", which\n// overrides the settings in here.\n//\n// Settings may also be placed in file type specific options files, for\n// example, in Packages/Python/Python.sublime-settings for python files.\n{\n    // Sets the colors used within the text area\n    \"color_scheme\": \"Packages/Color Scheme - Default/Monokai.tmTheme\",\n\n    // Note that the font_face and font_size are overridden in the platform\n    // specific settings file, for example, \"Preferences (Linux).sublime-settings\".\n    // Because of this, setting them here will have no effect: you must set them\n    // in your User File Preferences.\n    \"font_face\": \"\",\n    \"font_size\": 10,\n\n    // Valid options are \"no_bold\", \"no_italic\", \"no_antialias\", \"gray_antialias\",\n    // \"subpixel_antialias\", \"no_round\" (OS X only), \"gdi\" (Windows only) and\n    // \"directwrite\" (Windows only)\n    \"font_options\": [],\n\n    // Characters that are considered to separate words\n    \"word_separators\": \"./\\\\()\\\"'-:,.;<>~!@#$%^&*|+=[]{}`~?\",\n\n    // Set to false to prevent line numbers being drawn in the gutter\n    \"line_numbers\": true,\n\n    // Set to false to hide the gutter altogether\n    \"gutter\": true,\n\n    // Spacing between the gutter and the text\n    \"margin\": 4,\n\n    // Fold buttons are the triangles shown in the gutter to fold regions of text\n    \"fold_buttons\": true,\n\n    // Hides the fold buttons unless the mouse is over the gutter\n    \"fade_fold_buttons\": true,\n\n    // Columns in which to display vertical rulers\n    \"rulers\": [],\n\n    // Set to true to turn spell checking on by default\n    \"spell_check\": false,\n\n    // The number of spaces a tab is considered equal to\n    \"tab_size\": 4,\n\n    // Set to true to insert spaces when tab is pressed\n    \"translate_tabs_to_spaces\": false,\n\n    // If translate_tabs_to_spaces is true, use_tab_stops will make tab and\n    // backspace insert/delete up to the next tabstop\n    \"use_tab_stops\": true,\n\n    // Set to false to disable detection of tabs vs. spaces on load\n    \"detect_indentation\": true,\n\n    // Calculates indentation automatically when pressing enter\n    \"auto_indent\": true,\n\n    // Makes auto indent a little smarter, e.g., by indenting the next line\n    // after an if statement in C. Requires auto_indent to be enabled.\n    \"smart_indent\": true,\n\n    // Adds whitespace up to the first open bracket when indenting. Requires\n    // auto_indent to be enabled.\n    \"indent_to_bracket\": false,\n\n    // Trims white space added by auto_indent when moving the caret off the\n    // line.\n    \"trim_automatic_white_space\": true,\n\n    // Disables horizontal scrolling if enabled.\n    // May be set to true, false, or \"auto\", where it will be disabled for\n    // source code, and otherwise enabled.\n    \"word_wrap\": \"auto\",\n\n    // Set to a value other than 0 to force wrapping at that column rather than the\n    // window width\n    \"wrap_width\": 0,\n\n    // Set to false to prevent word wrapped lines from being indented to the same\n    // level\n    \"indent_subsequent_lines\": true,\n\n    // Draws text centered in the window rather than left aligned\n    \"draw_centered\": false,\n\n    // Controls auto pairing of quotes, brackets etc\n    \"auto_match_enabled\": true,\n\n    // Word list to use for spell checking\n    \"dictionary\": \"Packages/Language - English/en_US.dic\",\n\n    // Sets which scopes are checked for spelling errors\n    \"spelling_selector\": \"markup.raw, source string.quoted - punctuation - meta.preprocessor.c.include, source comment - source comment.block.preprocessor, -(source, constant, keyword, storage, support, variable, markup.underline.link, meta.tag)\",\n\n    // Set to true to draw a border around the visible rectangle on the minimap.\n    // The color of the border will be determined by the \"minimapBorder\" key in\n    // the color scheme\n    \"draw_minimap_border\": false,\n\n    // Always visualise the viewport on the minimap, as opposed to only\n    // showing it on mouse over\n    \"always_show_minimap_viewport\": false,\n\n    // If enabled, will highlight any line with a caret\n    \"highlight_line\": false,\n\n    // Valid values are \"smooth\", \"phase\", \"blink\" and \"solid\".\n    \"caret_style\": \"smooth\",\n\n    // These settings control the size of the caret\n    \"caret_extra_top\": 0,\n    \"caret_extra_bottom\": 0,\n    \"caret_extra_width\": 0,\n\n    // Set to false to disable underlining the brackets surrounding the caret\n    \"match_brackets\": true,\n\n    // Set to false if you'd rather only highlight the brackets when the caret is\n    // next to one\n    \"match_brackets_content\": true,\n\n    // Set to false to not highlight square brackets. This only takes effect if\n    // match_brackets is true\n    \"match_brackets_square\": true,\n\n    // Set to false to not highlight curly brackets. This only takes effect if\n    // match_brackets is true\n    \"match_brackets_braces\": true,\n\n    // Set to false to not highlight angle brackets. This only takes effect if\n    // match_brackets is true\n    \"match_brackets_angle\": false,\n\n    // Enable visualization of the matching tag in HTML and XML\n    \"match_tags\": true,\n\n    // Highlights other occurrences of the currently selected text\n    \"match_selection\": true,\n\n    // Additional spacing at the top of each line, in pixels\n    \"line_padding_top\": 0,\n\n    // Additional spacing at the bottom of each line, in pixels\n    \"line_padding_bottom\": 0,\n\n    // Set to false to disable scrolling past the end of the buffer.\n    // On OS X, this value is overridden in the platform specific settings, so\n    // you'll need to place this line in your user settings to override it.\n    \"scroll_past_end\": true,\n\n    // This controls what happens when pressing up or down when on the first\n    // or last line.\n    // On OS X, this value is overridden in the platform specific settings, so\n    // you'll need to place this line in your user settings to override it.\n    \"move_to_limit_on_up_down\": false,\n\n    // Set to \"none\" to turn off drawing white space, \"selection\" to draw only the\n    // white space within the selection, and \"all\" to draw all white space\n    \"draw_white_space\": \"selection\",\n\n    // Set to false to turn off the indentation guides.\n    // The color and width of the indent guides may be customized by editing\n    // the corresponding .tmTheme file, and specifying the colors \"guide\",\n    // \"activeGuide\" and \"stackGuide\"\n    \"draw_indent_guides\": true,\n\n    // Controls how the indent guides are drawn, valid options are\n    // \"draw_normal\" and \"draw_active\". draw_active will draw the indent\n    // guides containing the caret in a different color.\n    \"indent_guide_options\": [\"draw_normal\"],\n\n    // Set to true to removing trailing white space on save\n    \"trim_trailing_white_space_on_save\": false,\n\n    // Set to true to ensure the last line of the file ends in a newline\n    // character when saving\n    \"ensure_newline_at_eof_on_save\": false,\n\n    // Set to true to automatically save files when switching to a different file\n    // or application\n    \"save_on_focus_lost\": false,\n\n    // Save via writing to an alternate file, and then renaming it over the\n    // original file.\n    \"atomic_save\": false,\n\n    // The encoding to use when the encoding can't be determined automatically.\n    // ASCII, UTF-8 and UTF-16 encodings will be automatically detected.\n    \"fallback_encoding\": \"Western (Windows 1252)\",\n\n    // Encoding used when saving new files, and files opened with an undefined\n    // encoding (e.g., plain ascii files). If a file is opened with a specific\n    // encoding (either detected or given explicitly), this setting will be\n    // ignored, and the file will be saved with the encoding it was opened\n    // with.\n    \"default_encoding\": \"UTF-8\",\n\n    // Files containing null bytes are opened as hexadecimal by default\n    \"enable_hexadecimal_encoding\": true,\n\n    // Determines what character(s) are used to terminate each line in new files.\n    // Valid values are 'system' (whatever the OS uses), 'windows' (CRLF) and\n    // 'unix' (LF only).\n    \"default_line_ending\": \"system\",\n\n    // When enabled, pressing tab will insert the best matching completion.\n    // When disabled, tab will only trigger snippets or insert a tab.\n    // Shift+tab can be used to insert an explicit tab when tab_completion is\n    // enabled.\n    \"tab_completion\": true,\n\n    // Enable auto complete to be triggered automatically when typing.\n    \"auto_complete\": true,\n\n    // The maximum file size where auto complete will be automatically triggered.\n    \"auto_complete_size_limit\": 4194304,\n\n    // The delay, in ms, before the auto complete window is shown after typing\n    \"auto_complete_delay\": 50,\n\n    // Controls what scopes auto complete will be triggered in\n    \"auto_complete_selector\": \"source - comment, meta.tag - punctuation.definition.tag.begin\",\n\n    // Additional situations to trigger auto complete\n    \"auto_complete_triggers\": [ {\"selector\": \"text.html\", \"characters\": \"<\"} ],\n\n    // By default, auto complete will commit the current completion on enter.\n    // This setting can be used to make it complete on tab instead.\n    // Completing on tab is generally a superior option, as it removes\n    // ambiguity between committing the completion and inserting a newline.\n    \"auto_complete_commit_on_tab\": false,\n\n    // Controls if auto complete is shown when snippet fields are active.\n    // Only relevant if auto_complete_commit_on_tab is true.\n    \"auto_complete_with_fields\": false,\n\n    // Controls what happens when pressing the up key while the first item in\n    // the auto complete window is selected: if false, the window is hidden,\n    // otherwise the last item in the window is selected. Likewise for the\n    // down key when the last item is selected.\n    \"auto_complete_cycle\": false,\n\n    // Automatically close HTML and XML tags when </ is entered.\n    \"auto_close_tags\": true,\n\n    // By default, shift+tab will only unindent if the selection spans\n    // multiple lines. When pressing shift+tab at other times, it'll insert a\n    // tab character - this allows tabs to be inserted when tab_completion is\n    // enabled. Set this to true to make shift+tab always unindent, instead of\n    // inserting tabs.\n    \"shift_tab_unindent\": false,\n\n    // If true, the copy and cut commands will operate on the current line\n    // when the selection is empty, rather than doing nothing.\n    \"copy_with_empty_selection\": true,\n\n    // If true, the selected text will be copied into the find panel when it's\n    // shown.\n    // On OS X, this value is overridden in the platform specific settings, so\n    // you'll need to place this line in your user settings to override it.\n    \"find_selected_text\": true,\n\n    // When auto_find_in_selection is enabled, the \"Find in Selection\" flag\n    // will be enabled automatically when multiple lines of text are selected\n    \"auto_find_in_selection\": false,\n\n    // When drag_text is enabled, clicking on selected text will begin a\n    // drag-drop operation. This is not currently implemented under Linux.\n    \"drag_text\": true,\n\n    //\n    // User Interface Settings\n    //\n\n    // The theme controls the look of Sublime Text's UI (buttons, tabs, scroll bars, etc)\n    \"theme\": \"Default.sublime-theme\",\n\n    // Set to 0 to disable smooth scrolling. Set to a value between 0 and 1 to\n    // scroll slower, or set to larger than 1 to scroll faster\n    \"scroll_speed\": 1.0,\n\n    // Controls side bar animation when expanding or collapsing folders\n    \"tree_animation_enabled\": true,\n\n    // Controls animation throughout the application\n    \"animation_enabled\": true,\n\n    // Makes tabs with modified files more visible\n    \"highlight_modified_tabs\": false,\n\n    \"show_tab_close_buttons\": true,\n\n    // Show folders in the side bar in bold\n    \"bold_folder_labels\": false,\n\n    // OS X only: Set to true to disable Lion style full screen support.\n    // Sublime Text must be restarted for this to take effect.\n    \"use_simple_full_screen\": false,\n\n    // OS X only. Valid values are true, false, and \"auto\". Auto will enable\n    // the setting when running on a screen 2560 pixels or wider (i.e., a\n    // Retina display). When this setting is enabled, OpenGL is used to\n    // accelerate drawing. Sublime Text must be restarted for changes to take\n    // effect.\n    \"gpu_window_buffer\": \"auto\",\n\n    // Valid values are \"system\", \"enabled\" and \"disabled\"\n    \"overlay_scroll_bars\": \"system\",\n\n    // Allows tabs to scroll left and right, instead of simply shrinking\n    \"enable_tab_scrolling\": true,\n\n    // Display file encoding in the status bar\n    \"show_encoding\": false,\n\n    // Display line endings in the status bar\n    \"show_line_endings\": false,\n\n    //\n    // Application Behavior Settings\n    //\n\n    // Exiting the application with hot_exit enabled will cause it to close\n    // immediately without prompting. Unsaved modifications and open files will\n    // be preserved and restored when next starting.\n    //\n    // Closing a window with an associated project will also close the window\n    // without prompting, preserving unsaved changes in the workspace file\n    // alongside the project.\n    \"hot_exit\": true,\n\n    // remember_full_screen will allow Sublime Text to start in full screen\n    // mode if it was exited in full screen mode. When set to false, Sublime\n    // Text will never start in full screen mode.\n    \"remember_full_screen\": false,\n\n    // Always prompt before reloading a file, even if the file hasn't been\n    // modified. The default behavior is to automatically reload a file if it\n    // hasn't been edited. If a file has unsaved changes, a prompt will always\n    // be shown.\n    \"always_prompt_for_file_reload\": false,\n\n    // OS X only: When files are opened from finder, or by dragging onto the\n    // dock icon, this controls if a new window is created or not.\n    \"open_files_in_new_window\": true,\n\n    // OS X only: This controls if an empty window is created at startup or not.\n    \"create_window_at_startup\": true,\n\n    // Set to true to close windows as soon as the last file is closed, unless\n    // there's a folder open within the window.\n    // On OS X, this value is overridden in the platform specific settings, so\n    // you'll need to place this line in your user settings to override it.\n    \"close_windows_when_empty\": false,\n\n    // Show the full path to files in the title bar.\n    // On OS X, this value is overridden in the platform specific settings, so\n    // you'll need to place this line in your user settings to override it.\n    \"show_full_path\": true,\n\n    // Shows the Build Results panel when building. If set to false, the Build\n    // Results can be shown via the Tools/Build Results menu.\n    \"show_panel_on_build\": true,\n\n    // Preview file contents when clicking on a file in the side bar. Double\n    // clicking or editing the preview will open the file and assign it a tab.\n    \"preview_on_click\": true,\n\n    // folder_exclude_patterns and file_exclude_patterns control which files\n    // are listed in folders on the side bar. These can also be set on a per-\n    // project basis.\n    \"folder_exclude_patterns\": [\".svn\", \".git\", \".hg\", \"CVS\"],\n    \"file_exclude_patterns\": [\"*.pyc\", \"*.pyo\", \"*.exe\", \"*.dll\", \"*.obj\",\"*.o\", \"*.a\", \"*.lib\", \"*.so\", \"*.dylib\", \"*.ncb\", \"*.sdf\", \"*.suo\", \"*.pdb\", \"*.idb\", \".DS_Store\", \"*.class\", \"*.psd\", \"*.db\", \"*.sublime-workspace\"],\n    // These files will still show up in the side bar, but won't be included in\n    // Goto Anything or Find in Files\n    \"binary_file_patterns\": [\"*.jpg\", \"*.jpeg\", \"*.png\", \"*.gif\", \"*.ttf\", \"*.tga\", \"*.dds\", \"*.ico\", \"*.eot\", \"*.pdf\", \"*.swf\", \"*.jar\", \"*.zip\"],\n\n    // File indexing parses all files in the side bar, and builds an index of\n    // their symbols. This is required for Goto Definition to work.\n    \"index_files\": true,\n\n    // Set the number threads to use for indexing. A value of 0 will make\n    // Sublime Text guess based on the number of cores. Use the index_files\n    // setting to disable all workers.\n    \"index_workers\": 0,\n\n    // index_exclude_patterns indicate which files won't be indexed.\n    \"index_exclude_patterns\": [\"*.log\"],\n\n    // When enabled, anonymised usage data is sent back, assisting Sublime HQ\n    // in making informed decisions about improving Sublime Text. File names\n    // and file contents are never included, but data such as computer\n    // specifications, startup time, installed packages, and edited file types\n    // are. When disabled, telemetry is neither recorded or sent.\n    // A setting of auto will enable telemetry in dev builds, and disable\n    // telemetry in regular builds.\n    \"enable_telemetry\": \"auto\",\n\n    // List any packages to ignore here. When removing entries from this list,\n    // a restart may be required if the package contains plugins.\n    \"ignored_packages\": [\"Vintage\"]\n}\n",
			"file": "/home/victor/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 16856,
				"line_ending": "Unix",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "{\n	// exposed jsbeautifier options\n	\"indent_with_tabs\": false,\n	\"preserve_newlines\": true,\n	\"max_preserve_newlines\": 4,\n	\"space_in_paren\": false,\n	\"jslint_happy\": false,\n	\"brace_style\": \"collapse\",\n	\"keep_array_indentation\": false,\n	\"keep_function_indentation\": false,\n	\"eval_code\": false,\n	\"unescape_strings\": false,\n	\"break_chained_methods\": false,\n	\"e4x\": false,\n	\"wrap_line_length\": 0,\n\n	// jsformat options\n	\"format_on_save\": false,\n	\"jsbeautifyrc_files\": false\n}",
			"file": "/home/victor/.config/sublime-text-3/Packages/JsFormat/JsFormat.sublime-settings",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 468,
				"line_ending": "Unix",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "/home/victor/.config/sublime-text-3/Packages/User/JsFormat.sublime-settings",
			"settings":
			{
				"buffer_size": 465,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/victor/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
			"settings":
			{
				"buffer_size": 999,
				"line_ending": "Unix"
			}
		},
		{
			"file": ".jshintrc",
			"settings":
			{
				"buffer_size": 3501,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/app.js",
			"settings":
			{
				"buffer_size": 13460,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/clientes/views/main.html",
			"settings":
			{
				"buffer_size": 858,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/pedidos/views/pedidos.pendientes.html",
			"settings":
			{
				"buffer_size": 2016,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!doctype html>\n<html class=\"no-js\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n\n    <style type=\"text/css\">\n        [ng-cloak].splash {\n          display: block !important;\n        }\n        [ng-cloak] {display: none;}\n        /* some naive styles for a splash page */\n        .splash {\n          display: none;\n        }\n    </style>\n    <!-- Place favicon.ico and apple-touch-icon.png in the root directory -->\n    <link rel=\"stylesheet\" href=\"styles/vendor.css\">\n    \n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    </head>\n   \n    <body>\n    <div ng-app=\"sbAdminApp\">\n    <!-- The splash screen must be first -->\n        <div class=\"splash jumbotron\" ng-cloak>\n          <h1>Loading</h1>\n        </div>\n\n        <div ui-view></div>\n\n    \n    <script src=\"scripts/vendor.js\"></script>\n    \n    <script src=\"scripts/scripts.js\"></script>\n\n\n\n    <script>\n       (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n       (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n       m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n       })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n       ga('create', 'UA-XXXXX-X');\n       ga('send', 'pageview');\n    </script>\n    <!-- Custom CSS -->\n\n    <!-- Custom Fonts -->\n\n    <!-- Morris Charts CSS -->\n    <!-- <link href=\"styles/morrisjs/morris.css\" rel=\"stylesheet\"> -->\n\n\n\n\n    </div>\n\n    </body>\n\n</html>",
			"file": "dist/index.html",
			"file_size": 1585,
			"file_write_time": 130745315718638423,
			"settings":
			{
				"buffer_size": 1585,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/security/services/loginInterceptor.js",
			"settings":
			{
				"buffer_size": 1236,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 762,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/directives/header/header-notification/header-notification.html",
			"settings":
			{
				"buffer_size": 8416,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/security/controllers/LoginCtrl.js",
			"settings":
			{
				"buffer_size": 1274,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/pedidos/js/controllers/PedidosPendientesCtrl.js",
			"settings":
			{
				"buffer_size": 2242,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/index.html",
			"settings":
			{
				"buffer_size": 5128,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/pedidos/js/directives/TarjetaPedido.js",
			"settings":
			{
				"buffer_size": 826,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/clientes/views/modals/crear-cliente-modal.html",
			"settings":
			{
				"buffer_size": 1119,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/pedidos/views/modals/ver-pedido-modal.html",
			"settings":
			{
				"buffer_size": 505,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/clientes/js/controllers/ClienteCtrl.js",
			"settings":
			{
				"buffer_size": 2111,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/services/ApiHost.js",
			"settings":
			{
				"buffer_size": 220,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/pedidos/js/controllers/VerPedidoModalInstanceCtrl.js",
			"settings":
			{
				"buffer_size": 343,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/pedidos/js/controllers/ListaPedidosCtrl.js",
			"settings":
			{
				"buffer_size": 3557,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/pedidos/js/controllers/PedidosCtrl.js",
			"settings":
			{
				"buffer_size": 3233,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/clientes/js/controllers/CrearClienteModalInstanceCtrl.js",
			"settings":
			{
				"buffer_size": 773,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/clientes/js/services/Cliente.js",
			"settings":
			{
				"buffer_size": 490,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/filters/FromNow.js",
			"settings":
			{
				"buffer_size": 215,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 22222 files for \"FromNow\" (case sensitive)\n\n/home/victor/Documents/switch/sb-admin-angular/app/scripts/app.js:\n  189                  files: [\n  190                    'pedidos/js/services/Pedido.js',\n  191:                   'pedidos/js/filters/FromNow.js',\n  192                    'pedidos/js/services/Pedido.js'\n  193                  ]\n\n/home/victor/Documents/switch/sb-admin-angular/bower_components/moment/min/tests.js:\n  237      test('calendar all else', function (assert) {\n  238          var weeksAgo = moment().subtract({w: 1}),\n  239:             weeksFromNow = moment().add({w: 1});\n  240  \n  241          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n  242:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n  243  \n  244          weeksAgo = moment().subtract({w: 2});\n  245:         weeksFromNow = moment().add({w: 2});\n  246  \n  247          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n  248:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n  249      });\n  250  \n  ...\n  593      test('calendar all else', function (assert) {\n  594          var weeksAgo = moment().subtract({w: 1}),\n  595:             weeksFromNow = moment().add({w: 1});\n  596  \n  597          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n  598:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n  599  \n  600          weeksAgo = moment().subtract({w: 2});\n  601:         weeksFromNow = moment().add({w: 2});\n  602  \n  603          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n  604:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n  605      });\n  606  \n  ...\n  947      test('calendar all else', function (assert) {\n  948          var weeksAgo = moment().subtract({w: 1}),\n  949:             weeksFromNow = moment().add({w: 1});\n  950  \n  951          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n  952:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n  953  \n  954          weeksAgo = moment().subtract({w: 2});\n  955:         weeksFromNow = moment().add({w: 2});\n  956  \n  957          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n  958:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n  959      });\n  960  \n  ...\n 1386                  w: 1\n 1387              }),\n 1388:             weeksFromNow = moment().add({\n 1389                  w: 1\n 1390              });\n 1391  \n 1392          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '1 week ago');\n 1393:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 1 week');\n 1394  \n 1395          weeksAgo = moment().subtract({\n 1396              w: 2\n 1397          });\n 1398:         weeksFromNow = moment().add({\n 1399              w: 2\n 1400          });\n 1401  \n 1402          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '2 weeks ago');\n 1403:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 2 weeks');\n 1404      });\n 1405  \n ....\n 1763      test('calendar all else', function (assert) {\n 1764          var weeksAgo = moment().subtract({w: 1}),\n 1765:             weeksFromNow = moment().add({w: 1});\n 1766  \n 1767          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 1768:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 1769  \n 1770          weeksAgo = moment().subtract({w: 2});\n 1771:         weeksFromNow = moment().add({w: 2});\n 1772  \n 1773          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 1774:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 1775      });\n 1776  \n ....\n 2132      test('calendar all else', function (assert) {\n 2133          var weeksAgo = moment().subtract({w: 1}),\n 2134:             weeksFromNow = moment().add({w: 1});\n 2135  \n 2136          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 2137:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 2138  \n 2139          weeksAgo = moment().subtract({w: 2});\n 2140:         weeksFromNow = moment().add({w: 2});\n 2141  \n 2142          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 2143:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 2144      });\n 2145  \n ....\n 2543      test('calendar all else', function (assert) {\n 2544          var weeksAgo = moment().subtract({w: 1}),\n 2545:             weeksFromNow = moment().add({w: 1});\n 2546  \n 2547          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 2548:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 2549  \n 2550          weeksAgo = moment().subtract({w: 2});\n 2551:         weeksFromNow = moment().add({w: 2});\n 2552  \n 2553          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 2554:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 2555      });\n 2556  \n ....\n 2914      test('calendar all else', function (assert) {\n 2915          var weeksAgo = moment().subtract({w: 1}),\n 2916:             weeksFromNow = moment().add({w: 1});\n 2917  \n 2918          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 2919:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 2920  \n 2921          weeksAgo = moment().subtract({w: 2});\n 2922:         weeksFromNow = moment().add({w: 2});\n 2923  \n 2924          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 2925:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 2926      });\n 2927  \n ....\n 3269      test('calendar all else', function (assert) {\n 3270          var weeksAgo = moment().subtract({w: 1}),\n 3271:             weeksFromNow = moment().add({w: 1});\n 3272  \n 3273          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 3274:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 3275  \n 3276          weeksAgo = moment().subtract({w: 2});\n 3277:         weeksFromNow = moment().add({w: 2});\n 3278  \n 3279          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 3280:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 3281      });\n 3282  \n ....\n 3641      test('calendar all else', function (assert) {\n 3642          var weeksAgo = moment().subtract({w: 1}),\n 3643:             weeksFromNow = moment().add({w: 1});\n 3644  \n 3645          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 3646:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 3647  \n 3648          weeksAgo = moment().subtract({w: 2});\n 3649:         weeksFromNow = moment().add({w: 2});\n 3650  \n 3651          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 3652:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 3653      });\n 3654  \n ....\n 4021          moment.locale('br');\n 4022          var weeksAgo = moment().subtract({w: 1}),\n 4023:             weeksFromNow = moment().add({w: 1});\n 4024  \n 4025          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 4026:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 4027  \n 4028          weeksAgo = moment().subtract({w: 2});\n 4029:         weeksFromNow = moment().add({w: 2});\n 4030  \n 4031          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 4032:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 4033      });\n 4034  \n ....\n 4357      test('calendar all else', function (assert) {\n 4358          var weeksAgo = moment().subtract({w: 1}),\n 4359:             weeksFromNow = moment().add({w: 1});\n 4360  \n 4361          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 4362:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 4363  \n 4364          weeksAgo = moment().subtract({w: 2});\n 4365:         weeksFromNow = moment().add({w: 2});\n 4366  \n 4367          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 4368:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 4369      });\n 4370  \n ....\n 4713      test('calendar all else', function (assert) {\n 4714          var weeksAgo = moment().subtract({w: 1}),\n 4715:             weeksFromNow = moment().add({w: 1});\n 4716  \n 4717          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 4718:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 4719  \n 4720          weeksAgo = moment().subtract({w: 2});\n 4721:         weeksFromNow = moment().add({w: 2});\n 4722  \n 4723          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 4724:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 4725      });\n 4726  \n ....\n 5149      test('calendar all else', function (assert) {\n 5150          var weeksAgo = moment().subtract({w: 1}),\n 5151:             weeksFromNow = moment().add({w: 1});\n 5152  \n 5153          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 5154:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 5155  \n 5156          weeksAgo = moment().subtract({w: 2});\n 5157:         weeksFromNow = moment().add({w: 2});\n 5158  \n 5159          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 5160:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 5161      });\n 5162  \n ....\n 5514      test('calendar all else', function (assert) {\n 5515          var weeksAgo = moment().subtract({w: 1}),\n 5516:             weeksFromNow = moment().add({w: 1});\n 5517  \n 5518          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 5519:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 5520  \n 5521          weeksAgo = moment().subtract({w: 2});\n 5522:         weeksFromNow = moment().add({w: 2});\n 5523  \n 5524          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 5525:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 5526      });\n 5527  \n ....\n 5868      test('same all else', function (assert) {\n 5869          var weeksAgo = moment().subtract({w: 1}),\n 5870:             weeksFromNow = moment().add({w: 1});\n 5871  \n 5872          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 5873:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 5874  \n 5875          weeksAgo = moment().subtract({w: 2});\n 5876:         weeksFromNow = moment().add({w: 2});\n 5877  \n 5878          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 5879:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 5880      });\n 5881  \n ....\n 6526      test('calendar all else', function (assert) {\n 6527          var weeksAgo = moment().subtract({w: 1}),\n 6528:             weeksFromNow = moment().add({w: 1});\n 6529  \n 6530          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '1 week ago');\n 6531:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 1 week');\n 6532  \n 6533          weeksAgo = moment().subtract({w: 2});\n 6534:         weeksFromNow = moment().add({w: 2});\n 6535  \n 6536          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '2 weeks ago');\n 6537:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 2 weeks');\n 6538      });\n 6539  \n ....\n 6877      test('calendar all else', function (assert) {\n 6878          var weeksAgo = moment().subtract({w: 1}),\n 6879:             weeksFromNow = moment().add({w: 1});\n 6880  \n 6881          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 6882:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 6883  \n 6884          weeksAgo = moment().subtract({w: 2});\n 6885:         weeksFromNow = moment().add({w: 2});\n 6886  \n 6887          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 6888:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 6889      });\n 6890  \n ....\n 7279      test('calendar all else', function (assert) {\n 7280          var weeksAgo = moment().subtract({w: 1}),\n 7281:             weeksFromNow = moment().add({w: 1});\n 7282  \n 7283          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 7284:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 7285  \n 7286          weeksAgo = moment().subtract({w: 2});\n 7287:         weeksFromNow = moment().add({w: 2});\n 7288  \n 7289          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 7290:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 7291      });\n 7292  \n ....\n 7637      test('calendar all else', function (assert) {\n 7638          var weeksAgo = moment().subtract({w: 1}),\n 7639:             weeksFromNow = moment().add({w: 1});\n 7640  \n 7641          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 7642:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 7643  \n 7644          weeksAgo = moment().subtract({w: 2});\n 7645:         weeksFromNow = moment().add({w: 2});\n 7646  \n 7647          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 7648:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 7649      });\n 7650  \n ....\n 7993      test('calendar all else', function (assert) {\n 7994          var weeksAgo = moment().subtract({w: 1}),\n 7995:             weeksFromNow = moment().add({w: 1});\n 7996  \n 7997          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 7998:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 7999  \n 8000          weeksAgo = moment().subtract({w: 2});\n 8001:         weeksFromNow = moment().add({w: 2});\n 8002  \n 8003          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 8004:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 8005      });\n 8006  \n ....\n 8349      test('calendar all else', function (assert) {\n 8350          var weeksAgo = moment().subtract({w: 1}),\n 8351:             weeksFromNow = moment().add({w: 1});\n 8352  \n 8353          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 8354:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 8355  \n 8356          weeksAgo = moment().subtract({w: 2});\n 8357:         weeksFromNow = moment().add({w: 2});\n 8358  \n 8359          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 8360:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 8361      });\n 8362  \n ....\n 8715      test('calendar all else', function (assert) {\n 8716          var weeksAgo = moment().subtract({w: 1}),\n 8717:             weeksFromNow = moment().add({w: 1});\n 8718  \n 8719          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 8720:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 8721  \n 8722          weeksAgo = moment().subtract({w: 2});\n 8723:         weeksFromNow = moment().add({w: 2});\n 8724  \n 8725          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 8726:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 8727      });\n 8728  \n ....\n 9072      test('calendar all else', function (assert) {\n 9073          var weeksAgo = moment().subtract({w: 1}),\n 9074:             weeksFromNow = moment().add({w: 1});\n 9075  \n 9076          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 9077:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 9078  \n 9079          weeksAgo = moment().subtract({w: 2});\n 9080:         weeksFromNow = moment().add({w: 2});\n 9081  \n 9082          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 9083:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 9084      });\n 9085  \n ....\n 9431      test('calendar all else', function (assert) {\n 9432          var weeksAgo = moment().subtract({w: 1}),\n 9433:             weeksFromNow = moment().add({w: 1});\n 9434  \n 9435          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 9436:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 9437  \n 9438          weeksAgo = moment().subtract({w: 2});\n 9439:         weeksFromNow = moment().add({w: 2});\n 9440  \n 9441          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 9442:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 9443      });\n 9444  \n ....\n 9810      test('calendar all else', function (assert) {\n 9811          var weeksAgo = moment().subtract({w: 1}),\n 9812:             weeksFromNow = moment().add({w: 1});\n 9813  \n 9814          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 nädal tagasi');\n 9815:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '1 nädala pärast');\n 9816  \n 9817          weeksAgo = moment().subtract({w: 2});\n 9818:         weeksFromNow = moment().add({w: 2});\n 9819  \n 9820          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 nädalat tagasi');\n 9821:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '2 nädala pärast');\n 9822      });\n 9823  \n ....\n 10165      test('calendar all else', function (assert) {\n 10166          var weeksAgo = moment().subtract({w: 1}),\n 10167:             weeksFromNow = moment().add({w: 1});\n 10168  \n 10169          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 10170:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 10171  \n 10172          weeksAgo = moment().subtract({w: 2});\n 10173:         weeksFromNow = moment().add({w: 2});\n 10174  \n 10175          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 10176:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 10177      });\n 10178  \n .....\n 10513      test('calendar all else', function (assert) {\n 10514          var weeksAgo = moment().subtract({w: 1}),\n 10515:             weeksFromNow = moment().add({w: 1});\n 10516  \n 10517          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 10518:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 10519  \n 10520          weeksAgo = moment().subtract({w: 2});\n 10521:         weeksFromNow = moment().add({w: 2});\n 10522  \n 10523          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 10524:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 10525      });\n 10526  \n .....\n 10867      test('calendar all else', function (assert) {\n 10868          var weeksAgo = moment().subtract({w: 1}),\n 10869:             weeksFromNow = moment().add({w: 1});\n 10870  \n 10871          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  'yksi viikko sitten');\n 10872:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'yhden viikon päästä');\n 10873  \n 10874          weeksAgo = moment().subtract({w: 2});\n 10875:         weeksFromNow = moment().add({w: 2});\n 10876  \n 10877          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  'kaksi viikkoa sitten');\n 10878:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'kaden viikon päästä');\n 10879      });\n 10880  \n .....\n 11535      test('same all else', function (assert) {\n 11536          var weeksAgo = moment().subtract({w: 1}),\n 11537:             weeksFromNow = moment().add({w: 1});\n 11538  \n 11539          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 11540:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 11541  \n 11542          weeksAgo = moment().subtract({w: 2});\n 11543:         weeksFromNow = moment().add({w: 2});\n 11544  \n 11545          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 11546:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 11547      });\n 11548  \n .....\n 11889      test('same all else', function (assert) {\n 11890          var weeksAgo = moment().subtract({w: 1}),\n 11891:             weeksFromNow = moment().add({w: 1});\n 11892  \n 11893          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 11894:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 11895  \n 11896          weeksAgo = moment().subtract({w: 2});\n 11897:         weeksFromNow = moment().add({w: 2});\n 11898  \n 11899          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 11900:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 11901      });\n 11902  \n .....\n 12244      test('calendar all else', function (assert) {\n 12245          var weeksAgo = moment().subtract({w: 1}),\n 12246:             weeksFromNow = moment().add({w: 1});\n 12247  \n 12248          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 12249:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 12250  \n 12251          weeksAgo = moment().subtract({w: 2});\n 12252:         weeksFromNow = moment().add({w: 2});\n 12253  \n 12254          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 12255:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 12256      });\n 12257  \n .....\n 12608      test('calendar all else', function (assert) {\n 12609          var weeksAgo = moment().subtract({w: 1}),\n 12610:             weeksFromNow = moment().add({w: 1});\n 12611  \n 12612          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 12613:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 12614  \n 12615          weeksAgo = moment().subtract({w: 2});\n 12616:         weeksFromNow = moment().add({w: 2});\n 12617  \n 12618          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 12619:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 12620      });\n 12621  \n .....\n 12933      test('calendar all else', function (assert) {\n 12934          var weeksAgo = moment().subtract({w: 1}),\n 12935:             weeksFromNow = moment().add({w: 1});\n 12936  \n 12937          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 12938:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 12939  \n 12940          weeksAgo = moment().subtract({w: 2});\n 12941:         weeksFromNow = moment().add({w: 2});\n 12942  \n 12943          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 12944:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 12945      });\n 12946  \n .....\n 13288      test('calendar all else', function (assert) {\n 13289          var weeksAgo = moment().subtract({w: 1}),\n 13290:             weeksFromNow = moment().add({w: 1});\n 13291  \n 13292          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 13293:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 13294  \n 13295          weeksAgo = moment().subtract({w: 2});\n 13296:         weeksFromNow = moment().add({w: 2});\n 13297  \n 13298          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 13299:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 13300      });\n 13301  \n .....\n 13704      test('calendar all else', function (assert) {\n 13705          var weeksAgo = moment().subtract({w: 1}),\n 13706:             weeksFromNow = moment().add({w: 1});\n 13707  \n 13708          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 13709:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 13710  \n 13711          weeksAgo = moment().subtract({w: 2});\n 13712:         weeksFromNow = moment().add({w: 2});\n 13713  \n 13714          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 13715:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 13716      });\n 13717  \n .....\n 14073      test('calendar all else', function (assert) {\n 14074          var weeksAgo = moment().subtract({w: 1}),\n 14075:             weeksFromNow = moment().add({w: 1});\n 14076  \n 14077          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  'egy héte');\n 14078:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'egy hét múlva');\n 14079  \n 14080          weeksAgo = moment().subtract({w: 2});\n 14081:         weeksFromNow = moment().add({w: 2});\n 14082  \n 14083          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 hete');\n 14084:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '2 hét múlva');\n 14085      });\n 14086  \n .....\n 14498      test('calendar all else', function (assert) {\n 14499          var weeksAgo = moment().subtract({w: 1}),\n 14500:             weeksFromNow = moment().add({w: 1});\n 14501  \n 14502          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 14503:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 14504  \n 14505          weeksAgo = moment().subtract({w: 2});\n 14506:         weeksFromNow = moment().add({w: 2});\n 14507  \n 14508          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 14509:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 14510      });\n 14511  \n .....\n 14816      test('calendar all else', function (assert) {\n 14817          var weeksAgo = moment().subtract({w: 1}),\n 14818:             weeksFromNow = moment().add({w: 1});\n 14819  \n 14820          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 14821:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 14822  \n 14823          weeksAgo = moment().subtract({w: 2});\n 14824:         weeksFromNow = moment().add({w: 2});\n 14825  \n 14826          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 14827:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 14828      });\n 14829  \n .....\n 15190      test('calendar all else', function (assert) {\n 15191          var weeksAgo = moment().subtract({w: 1}),\n 15192:             weeksFromNow = moment().add({w: 1});\n 15193  \n 15194          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 15195:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 15196  \n 15197          weeksAgo = moment().subtract({w: 2});\n 15198:         weeksFromNow = moment().add({w: 2});\n 15199  \n 15200          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 15201:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 15202      });\n 15203  \n .....\n 15544      test('calendar all else', function (assert) {\n 15545          var weeksAgo = moment().subtract({w: 1}),\n 15546:             weeksFromNow = moment().add({w: 1});\n 15547  \n 15548          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 15549:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 15550  \n 15551          weeksAgo = moment().subtract({w: 2});\n 15552:         weeksFromNow = moment().add({w: 2});\n 15553  \n 15554          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 15555:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 15556      });\n 15557  \n .....\n 15862      test('calendar all else', function (assert) {\n 15863          var weeksAgo = moment().subtract({w: 1}),\n 15864:             weeksFromNow = moment().add({w: 1});\n 15865  \n 15866          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '1 week ago');\n 15867:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 15868  \n 15869          weeksAgo = moment().subtract({w: 2});\n 15870:         weeksFromNow = moment().add({w: 2});\n 15871  \n 15872          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '2 weeks ago');\n 15873:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 15874      });\n 15875  \n .....\n 16230      test('calendar all else', function (assert) {\n 16231          var weeksAgo = moment().subtract({w: 1}),\n 16232:             weeksFromNow = moment().add({w: 1});\n 16233  \n 16234          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 კვირის წინ');\n 16235:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '1 კვირაში');\n 16236  \n 16237          weeksAgo = moment().subtract({w: 2});\n 16238:         weeksFromNow = moment().add({w: 2});\n 16239  \n 16240          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 კვირის წინ');\n 16241:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '2 კვირაში');\n 16242      });\n 16243  \n .....\n 16610                  w: 1\n 16611              }),\n 16612:             weeksFromNow = moment().add({\n 16613                  w: 1\n 16614              });\n 16615  \n 16616          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '1 week ago');\n 16617:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 1 week');\n 16618  \n 16619          weeksAgo = moment().subtract({\n 16620              w: 2\n 16621          });\n 16622:         weeksFromNow = moment().add({\n 16623              w: 2\n 16624          });\n 16625  \n 16626          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '2 weeks ago');\n 16627:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 2 weeks');\n 16628      });\n 16629  \n .....\n 17007      test('calendar all else', function (assert) {\n 17008          var weeksAgo = moment().subtract({w: 1}),\n 17009:             weeksFromNow = moment().add({w: 1});\n 17010  \n 17011          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 17012:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 17013  \n 17014          weeksAgo = moment().subtract({w: 2});\n 17015:         weeksFromNow = moment().add({w: 2});\n 17016  \n 17017          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 17018:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 17019      });\n 17020  \n .....\n 17605      test('calendar all else', function (assert) {\n 17606          var weeksAgo = moment().subtract({w: 1}),\n 17607:             weeksFromNow = moment().add({w: 1});\n 17608  \n 17609          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 17610:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 17611  \n 17612          weeksAgo = moment().subtract({w: 2});\n 17613:         weeksFromNow = moment().add({w: 2});\n 17614  \n 17615          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 17616:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 17617      });\n 17618  \n .....\n 17960      test('calendar all else', function (assert) {\n 17961          var weeksAgo = moment().subtract({w: 1}),\n 17962:             weeksFromNow = moment().add({w: 1});\n 17963  \n 17964          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 17965:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 17966  \n 17967          weeksAgo = moment().subtract({w: 2});\n 17968:         weeksFromNow = moment().add({w: 2});\n 17969  \n 17970          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 17971:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 17972      });\n 17973  \n .....\n 18330      test('calendar all else', function (assert) {\n 18331          var weeksAgo = moment().subtract({w: 1}),\n 18332:             weeksFromNow = moment().add({w: 1});\n 18333  \n 18334          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 18335:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 18336  \n 18337          weeksAgo = moment().subtract({w: 2});\n 18338:         weeksFromNow = moment().add({w: 2});\n 18339  \n 18340          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 18341:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 18342      });\n 18343  \n .....\n 18685      test('calendar all else', function (assert) {\n 18686          var weeksAgo = moment().subtract({w: 1}),\n 18687:             weeksFromNow = moment().add({w: 1});\n 18688  \n 18689          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 18690:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 18691  \n 18692          weeksAgo = moment().subtract({w: 2});\n 18693:         weeksFromNow = moment().add({w: 2});\n 18694  \n 18695          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 18696:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 18697      });\n 18698  \n .....\n 19056      test('calendar all else', function (assert) {\n 19057          var weeksAgo = moment().subtract({w: 1}),\n 19058:             weeksFromNow = moment().add({w: 1});\n 19059  \n 19060          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 19061:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 19062  \n 19063          weeksAgo = moment().subtract({w: 2});\n 19064:         weeksFromNow = moment().add({w: 2});\n 19065  \n 19066          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 19067:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 19068      });\n 19069  \n .....\n 19448      test('calendar all else', function (assert) {\n 19449          var weeksAgo = moment().subtract({w: 1}),\n 19450:             weeksFromNow = moment().add({w: 1});\n 19451  \n 19452          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 minggu lepas');\n 19453:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'dalam 1 minggu');\n 19454  \n 19455          weeksAgo = moment().subtract({w: 2});\n 19456:         weeksFromNow = moment().add({w: 2});\n 19457  \n 19458          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 minggu lepas');\n 19459:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'dalam 2 minggu');\n 19460      });\n 19461  \n .....\n 19897                  w: 1\n 19898              }),\n 19899:             weeksFromNow = moment().add({\n 19900                  w: 1\n 19901              });\n 19902  \n 19903          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), 'လွန်ခဲ့သော ၁ ပတ်က');\n 19904:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), '၁ ပတ်အတွင်း');\n 19905  \n 19906          weeksAgo = moment().subtract({\n 19907              w: 2\n 19908          });\n 19909:         weeksFromNow = moment().add({\n 19910              w: 2\n 19911          });\n 19912  \n 19913          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '၂ ပတ် အရင်က');\n 19914:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), '၂ ပတ် အတွင်း');\n 19915      });\n 19916  \n .....\n 20259      test('calendar all else', function (assert) {\n 20260          var weeksAgo = moment().subtract({w: 1}),\n 20261:             weeksFromNow = moment().add({w: 1});\n 20262  \n 20263          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 20264:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 20265  \n 20266          weeksAgo = moment().subtract({w: 2});\n 20267:         weeksFromNow = moment().add({w: 2});\n 20268  \n 20269          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 20270:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 20271      });\n 20272  \n .....\n 20613      test('calendar all else', function (assert) {\n 20614          var weeksAgo = moment().subtract({w: 1}),\n 20615:             weeksFromNow = moment().add({w: 1});\n 20616  \n 20617          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 20618:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 20619  \n 20620          weeksAgo = moment().subtract({w: 2});\n 20621:         weeksFromNow = moment().add({w: 2});\n 20622  \n 20623          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 20624:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 20625      });\n 20626  \n .....\n 20996      test('calendar all else', function (assert) {\n 20997          var weeksAgo = moment().subtract({w: 1}),\n 20998:             weeksFromNow = moment().add({w: 1});\n 20999  \n 21000          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 21001:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 21002  \n 21003          weeksAgo = moment().subtract({w: 2});\n 21004:         weeksFromNow = moment().add({w: 2});\n 21005  \n 21006          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 21007:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 21008      });\n 21009  \n .....\n 21356      test('calendar all else', function (assert) {\n 21357          var weeksAgo = moment().subtract({w: 1}),\n 21358:             weeksFromNow = moment().add({w: 1});\n 21359  \n 21360          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 21361:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 21362  \n 21363          weeksAgo = moment().subtract({w: 2});\n 21364:         weeksFromNow = moment().add({w: 2});\n 21365  \n 21366          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 21367:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 21368      });\n 21369  \n .....\n 21732      test('calendar all else', function (assert) {\n 21733          var weeksAgo = moment().subtract({w: 1}),\n 21734:             weeksFromNow = moment().add({w: 1});\n 21735  \n 21736          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 21737:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 21738  \n 21739          weeksAgo = moment().subtract({w: 2});\n 21740:         weeksFromNow = moment().add({w: 2});\n 21741  \n 21742          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 21743:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 21744      });\n 21745  \n .....\n 22085      test('calendar all else', function (assert) {\n 22086          var weeksAgo = moment().subtract({w: 1}),\n 22087:             weeksFromNow = moment().add({w: 1});\n 22088  \n 22089          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 22090:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 22091  \n 22092          weeksAgo = moment().subtract({w: 2});\n 22093:         weeksFromNow = moment().add({w: 2});\n 22094  \n 22095          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 22096:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 22097      });\n 22098  \n .....\n 22436      test('calendar all else', function (assert) {\n 22437          var weeksAgo = moment().subtract({w: 1}),\n 22438:             weeksFromNow = moment().add({w: 1});\n 22439  \n 22440          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 22441:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 22442  \n 22443          weeksAgo = moment().subtract({w: 2});\n 22444:         weeksFromNow = moment().add({w: 2});\n 22445  \n 22446          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 22447:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 22448      });\n 22449  \n .....\n 22799      test('calendar all else', function (assert) {\n 22800          var weeksAgo = moment().subtract({w: 1}),\n 22801:             weeksFromNow = moment().add({w: 1});\n 22802  \n 22803          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 22804:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 22805  \n 22806          weeksAgo = moment().subtract({w: 2});\n 22807:         weeksFromNow = moment().add({w: 2});\n 22808  \n 22809          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 22810:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 22811      });\n 22812  \n .....\n 23263      test('calendar all else', function (assert) {\n 23264          var weeksAgo = moment().subtract({w: 1}),\n 23265:             weeksFromNow = moment().add({w: 1});\n 23266  \n 23267          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 23268:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 23269  \n 23270          weeksAgo = moment().subtract({w: 2});\n 23271:         weeksFromNow = moment().add({w: 2});\n 23272  \n 23273          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 23274:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 23275      });\n 23276  \n .....\n 23699      test('calendar all else', function (assert) {\n 23700          var weeksAgo = moment().subtract({w: 1}),\n 23701:             weeksFromNow = moment().add({w: 1});\n 23702  \n 23703          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 23704:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 23705  \n 23706          weeksAgo = moment().subtract({w: 2});\n 23707:         weeksFromNow = moment().add({w: 2});\n 23708  \n 23709          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 23710:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 23711      });\n 23712  \n .....\n 24093      test('calendar all else', function (assert) {\n 24094          var weeksAgo = moment().subtract({w: 1}),\n 24095:             weeksFromNow = moment().add({w: 1});\n 24096  \n 24097          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 24098:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 24099  \n 24100          weeksAgo = moment().subtract({w: 2});\n 24101:         weeksFromNow = moment().add({w: 2});\n 24102  \n 24103          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 24104:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 24105      });\n 24106  \n .....\n 24464      test('calendar all else', function (assert) {\n 24465          var weeksAgo = moment().subtract({w: 1}),\n 24466:             weeksFromNow = moment().add({w: 1});\n 24467  \n 24468          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 24469:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 24470  \n 24471          weeksAgo = moment().subtract({w: 2});\n 24472:         weeksFromNow = moment().add({w: 2});\n 24473  \n 24474          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 24475:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 24476      });\n 24477  \n .....\n 24854      test('calendar all else', function (assert) {\n 24855          var weeksAgo = moment().subtract({w: 1}),\n 24856:             weeksFromNow = moment().add({w: 1});\n 24857  \n 24858          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 24859:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 24860  \n 24861          weeksAgo = moment().subtract({w: 2});\n 24862:         weeksFromNow = moment().add({w: 2});\n 24863  \n 24864          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 24865:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 24866      });\n 24867  \n .....\n 25244      test('calendar all else', function (assert) {\n 25245          var weeksAgo = moment().subtract({w: 1}),\n 25246:             weeksFromNow = moment().add({w: 1});\n 25247  \n 25248          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 25249:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 25250  \n 25251          weeksAgo = moment().subtract({w: 2});\n 25252:         weeksFromNow = moment().add({w: 2});\n 25253  \n 25254          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 25255:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 25256      });\n 25257  \n .....\n 25599      test('calendar all else', function (assert) {\n 25600          var weeksAgo = moment().subtract({w: 1}),\n 25601:             weeksFromNow = moment().add({w: 1});\n 25602  \n 25603          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 25604:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 25605  \n 25606          weeksAgo = moment().subtract({w: 2});\n 25607:         weeksFromNow = moment().add({w: 2});\n 25608  \n 25609          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 25610:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 25611      });\n 25612  \n .....\n 25955      test('calendar all else', function (assert) {\n 25956          var weeksAgo = moment().subtract({w: 1}),\n 25957:             weeksFromNow = moment().add({w: 1});\n 25958  \n 25959          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 25960:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 25961  \n 25962          weeksAgo = moment().subtract({w: 2});\n 25963:         weeksFromNow = moment().add({w: 2});\n 25964  \n 25965          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 25966:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 25967      });\n 25968  \n .....\n 26287      test('calendar all else', function (assert) {\n 26288          var weeksAgo = moment().subtract({w: 1}),\n 26289:             weeksFromNow = moment().add({w: 1});\n 26290  \n 26291          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '1 week ago');\n 26292:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 26293  \n 26294          weeksAgo = moment().subtract({w: 2});\n 26295:         weeksFromNow = moment().add({w: 2});\n 26296  \n 26297          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '2 weeks ago');\n 26298:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 26299      });\n 26300  \n .....\n 26641      test('same all else', function (assert) {\n 26642          var weeksAgo = moment().subtract({w: 1}),\n 26643:             weeksFromNow = moment().add({w: 1});\n 26644  \n 26645          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 26646:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 26647  \n 26648          weeksAgo = moment().subtract({w: 2});\n 26649:         weeksFromNow = moment().add({w: 2});\n 26650  \n 26651          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 26652:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 26653      });\n 26654  \n .....\n 27007      test('calendar all else', function (assert) {\n 27008          var weeksAgo = moment().subtract({w: 1}),\n 27009:             weeksFromNow = moment().add({w: 1});\n 27010  \n 27011          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 27012:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 27013  \n 27014          weeksAgo = moment().subtract({w: 2});\n 27015:         weeksFromNow = moment().add({w: 2});\n 27016  \n 27017          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 27018:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 27019      });\n 27020  \n .....\n 27362      test('calendar all else', function (assert) {\n 27363          var weeksAgo = moment().subtract({w: 1}),\n 27364:             weeksFromNow = moment().add({w: 1});\n 27365  \n 27366          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 27367:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 27368  \n 27369          weeksAgo = moment().subtract({w: 2});\n 27370:         weeksFromNow = moment().add({w: 2});\n 27371  \n 27372          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 27373:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 27374      });\n 27375  \n .....\n 27715      test('calendar all else', function (assert) {\n 27716          var weeksAgo = moment().subtract({w: 1}),\n 27717:             weeksFromNow = moment().add({w: 1});\n 27718  \n 27719          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 27720:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 27721  \n 27722          weeksAgo = moment().subtract({w: 2});\n 27723:         weeksFromNow = moment().add({w: 2});\n 27724  \n 27725          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 27726:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 27727      });\n 27728  \n .....\n 28101      test('calendar all else', function (assert) {\n 28102          var weeksAgo = moment().subtract({w: 1}),\n 28103:             weeksFromNow = moment().add({w: 1});\n 28104  \n 28105          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 28106:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 28107  \n 28108          weeksAgo = moment().subtract({w: 2});\n 28109:         weeksFromNow = moment().add({w: 2});\n 28110  \n 28111          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 28112:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 28113      });\n 28114  \n .....\n 28457      test('calendar all else', function (assert) {\n 28458          var weeksAgo = moment().subtract({w: 1}),\n 28459:             weeksFromNow = moment().add({w: 1});\n 28460  \n 28461          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 28462:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 28463  \n 28464          weeksAgo = moment().subtract({w: 2});\n 28465:         weeksFromNow = moment().add({w: 2});\n 28466  \n 28467          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 28468:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 28469      });\n 28470  \n .....\n 28823      test('calendar all else', function (assert) {\n 28824          var weeksAgo = moment().subtract({w: 1}),\n 28825:             weeksFromNow = moment().add({w: 1});\n 28826  \n 28827          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 28828:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 28829  \n 28830          weeksAgo = moment().subtract({w: 2});\n 28831:         weeksFromNow = moment().add({w: 2});\n 28832  \n 28833          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 28834:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 28835      });\n 28836  \n .....\n 29166      test('calendar all else', function (assert) {\n 29167          var weeksAgo = moment().subtract({w: 1}),\n 29168:             weeksFromNow = moment().add({w: 1});\n 29169  \n 29170          assert.equal(weeksAgo.calendar(),       weeksAgo.format('LL'),      '1 week ago');\n 29171:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('LL'),  'in 1 week');\n 29172  \n 29173          weeksAgo = moment().subtract({w: 2});\n 29174:         weeksFromNow = moment().add({w: 2});\n 29175  \n 29176          assert.equal(weeksAgo.calendar(),       weeksAgo.format('LL'),      '2 weeks ago');\n 29177:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('LL'),  'in 2 weeks');\n 29178      });\n 29179  \n .....\n 29498      test('calendar all else', function (assert) {\n 29499          var weeksAgo = moment().subtract({w: 1}),\n 29500:             weeksFromNow = moment().add({w: 1});\n 29501  \n 29502          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '1 week ago');\n 29503:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 29504  \n 29505          weeksAgo = moment().subtract({w: 2});\n 29506:         weeksFromNow = moment().add({w: 2});\n 29507  \n 29508          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '2 weeks ago');\n 29509:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 29510      });\n 29511  \n\n/home/victor/Documents/switch/sb-admin-angular/dist/bower_components/moment/min/tests.js:\n  237      test('calendar all else', function (assert) {\n  238          var weeksAgo = moment().subtract({w: 1}),\n  239:             weeksFromNow = moment().add({w: 1});\n  240  \n  241          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n  242:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n  243  \n  244          weeksAgo = moment().subtract({w: 2});\n  245:         weeksFromNow = moment().add({w: 2});\n  246  \n  247          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n  248:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n  249      });\n  250  \n  ...\n  593      test('calendar all else', function (assert) {\n  594          var weeksAgo = moment().subtract({w: 1}),\n  595:             weeksFromNow = moment().add({w: 1});\n  596  \n  597          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n  598:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n  599  \n  600          weeksAgo = moment().subtract({w: 2});\n  601:         weeksFromNow = moment().add({w: 2});\n  602  \n  603          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n  604:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n  605      });\n  606  \n  ...\n  947      test('calendar all else', function (assert) {\n  948          var weeksAgo = moment().subtract({w: 1}),\n  949:             weeksFromNow = moment().add({w: 1});\n  950  \n  951          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n  952:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n  953  \n  954          weeksAgo = moment().subtract({w: 2});\n  955:         weeksFromNow = moment().add({w: 2});\n  956  \n  957          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n  958:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n  959      });\n  960  \n  ...\n 1386                  w: 1\n 1387              }),\n 1388:             weeksFromNow = moment().add({\n 1389                  w: 1\n 1390              });\n 1391  \n 1392          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '1 week ago');\n 1393:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 1 week');\n 1394  \n 1395          weeksAgo = moment().subtract({\n 1396              w: 2\n 1397          });\n 1398:         weeksFromNow = moment().add({\n 1399              w: 2\n 1400          });\n 1401  \n 1402          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '2 weeks ago');\n 1403:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 2 weeks');\n 1404      });\n 1405  \n ....\n 1763      test('calendar all else', function (assert) {\n 1764          var weeksAgo = moment().subtract({w: 1}),\n 1765:             weeksFromNow = moment().add({w: 1});\n 1766  \n 1767          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 1768:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 1769  \n 1770          weeksAgo = moment().subtract({w: 2});\n 1771:         weeksFromNow = moment().add({w: 2});\n 1772  \n 1773          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 1774:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 1775      });\n 1776  \n ....\n 2132      test('calendar all else', function (assert) {\n 2133          var weeksAgo = moment().subtract({w: 1}),\n 2134:             weeksFromNow = moment().add({w: 1});\n 2135  \n 2136          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 2137:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 2138  \n 2139          weeksAgo = moment().subtract({w: 2});\n 2140:         weeksFromNow = moment().add({w: 2});\n 2141  \n 2142          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 2143:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 2144      });\n 2145  \n ....\n 2543      test('calendar all else', function (assert) {\n 2544          var weeksAgo = moment().subtract({w: 1}),\n 2545:             weeksFromNow = moment().add({w: 1});\n 2546  \n 2547          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 2548:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 2549  \n 2550          weeksAgo = moment().subtract({w: 2});\n 2551:         weeksFromNow = moment().add({w: 2});\n 2552  \n 2553          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 2554:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 2555      });\n 2556  \n ....\n 2914      test('calendar all else', function (assert) {\n 2915          var weeksAgo = moment().subtract({w: 1}),\n 2916:             weeksFromNow = moment().add({w: 1});\n 2917  \n 2918          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 2919:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 2920  \n 2921          weeksAgo = moment().subtract({w: 2});\n 2922:         weeksFromNow = moment().add({w: 2});\n 2923  \n 2924          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 2925:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 2926      });\n 2927  \n ....\n 3269      test('calendar all else', function (assert) {\n 3270          var weeksAgo = moment().subtract({w: 1}),\n 3271:             weeksFromNow = moment().add({w: 1});\n 3272  \n 3273          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 3274:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 3275  \n 3276          weeksAgo = moment().subtract({w: 2});\n 3277:         weeksFromNow = moment().add({w: 2});\n 3278  \n 3279          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 3280:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 3281      });\n 3282  \n ....\n 3641      test('calendar all else', function (assert) {\n 3642          var weeksAgo = moment().subtract({w: 1}),\n 3643:             weeksFromNow = moment().add({w: 1});\n 3644  \n 3645          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 3646:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 3647  \n 3648          weeksAgo = moment().subtract({w: 2});\n 3649:         weeksFromNow = moment().add({w: 2});\n 3650  \n 3651          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 3652:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 3653      });\n 3654  \n ....\n 4021          moment.locale('br');\n 4022          var weeksAgo = moment().subtract({w: 1}),\n 4023:             weeksFromNow = moment().add({w: 1});\n 4024  \n 4025          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 4026:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 4027  \n 4028          weeksAgo = moment().subtract({w: 2});\n 4029:         weeksFromNow = moment().add({w: 2});\n 4030  \n 4031          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 4032:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 4033      });\n 4034  \n ....\n 4357      test('calendar all else', function (assert) {\n 4358          var weeksAgo = moment().subtract({w: 1}),\n 4359:             weeksFromNow = moment().add({w: 1});\n 4360  \n 4361          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 4362:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 4363  \n 4364          weeksAgo = moment().subtract({w: 2});\n 4365:         weeksFromNow = moment().add({w: 2});\n 4366  \n 4367          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 4368:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 4369      });\n 4370  \n ....\n 4713      test('calendar all else', function (assert) {\n 4714          var weeksAgo = moment().subtract({w: 1}),\n 4715:             weeksFromNow = moment().add({w: 1});\n 4716  \n 4717          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 4718:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 4719  \n 4720          weeksAgo = moment().subtract({w: 2});\n 4721:         weeksFromNow = moment().add({w: 2});\n 4722  \n 4723          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 4724:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 4725      });\n 4726  \n ....\n 5149      test('calendar all else', function (assert) {\n 5150          var weeksAgo = moment().subtract({w: 1}),\n 5151:             weeksFromNow = moment().add({w: 1});\n 5152  \n 5153          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 5154:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 5155  \n 5156          weeksAgo = moment().subtract({w: 2});\n 5157:         weeksFromNow = moment().add({w: 2});\n 5158  \n 5159          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 5160:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 5161      });\n 5162  \n ....\n 5514      test('calendar all else', function (assert) {\n 5515          var weeksAgo = moment().subtract({w: 1}),\n 5516:             weeksFromNow = moment().add({w: 1});\n 5517  \n 5518          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 5519:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 5520  \n 5521          weeksAgo = moment().subtract({w: 2});\n 5522:         weeksFromNow = moment().add({w: 2});\n 5523  \n 5524          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 5525:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 5526      });\n 5527  \n ....\n 5868      test('same all else', function (assert) {\n 5869          var weeksAgo = moment().subtract({w: 1}),\n 5870:             weeksFromNow = moment().add({w: 1});\n 5871  \n 5872          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 5873:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 5874  \n 5875          weeksAgo = moment().subtract({w: 2});\n 5876:         weeksFromNow = moment().add({w: 2});\n 5877  \n 5878          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 5879:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 5880      });\n 5881  \n ....\n 6526      test('calendar all else', function (assert) {\n 6527          var weeksAgo = moment().subtract({w: 1}),\n 6528:             weeksFromNow = moment().add({w: 1});\n 6529  \n 6530          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '1 week ago');\n 6531:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 1 week');\n 6532  \n 6533          weeksAgo = moment().subtract({w: 2});\n 6534:         weeksFromNow = moment().add({w: 2});\n 6535  \n 6536          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '2 weeks ago');\n 6537:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 2 weeks');\n 6538      });\n 6539  \n ....\n 6877      test('calendar all else', function (assert) {\n 6878          var weeksAgo = moment().subtract({w: 1}),\n 6879:             weeksFromNow = moment().add({w: 1});\n 6880  \n 6881          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 6882:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 6883  \n 6884          weeksAgo = moment().subtract({w: 2});\n 6885:         weeksFromNow = moment().add({w: 2});\n 6886  \n 6887          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 6888:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 6889      });\n 6890  \n ....\n 7279      test('calendar all else', function (assert) {\n 7280          var weeksAgo = moment().subtract({w: 1}),\n 7281:             weeksFromNow = moment().add({w: 1});\n 7282  \n 7283          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 7284:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 7285  \n 7286          weeksAgo = moment().subtract({w: 2});\n 7287:         weeksFromNow = moment().add({w: 2});\n 7288  \n 7289          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 7290:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 7291      });\n 7292  \n ....\n 7637      test('calendar all else', function (assert) {\n 7638          var weeksAgo = moment().subtract({w: 1}),\n 7639:             weeksFromNow = moment().add({w: 1});\n 7640  \n 7641          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 7642:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 7643  \n 7644          weeksAgo = moment().subtract({w: 2});\n 7645:         weeksFromNow = moment().add({w: 2});\n 7646  \n 7647          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 7648:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 7649      });\n 7650  \n ....\n 7993      test('calendar all else', function (assert) {\n 7994          var weeksAgo = moment().subtract({w: 1}),\n 7995:             weeksFromNow = moment().add({w: 1});\n 7996  \n 7997          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 7998:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 7999  \n 8000          weeksAgo = moment().subtract({w: 2});\n 8001:         weeksFromNow = moment().add({w: 2});\n 8002  \n 8003          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 8004:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 8005      });\n 8006  \n ....\n 8349      test('calendar all else', function (assert) {\n 8350          var weeksAgo = moment().subtract({w: 1}),\n 8351:             weeksFromNow = moment().add({w: 1});\n 8352  \n 8353          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 8354:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 8355  \n 8356          weeksAgo = moment().subtract({w: 2});\n 8357:         weeksFromNow = moment().add({w: 2});\n 8358  \n 8359          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 8360:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 8361      });\n 8362  \n ....\n 8715      test('calendar all else', function (assert) {\n 8716          var weeksAgo = moment().subtract({w: 1}),\n 8717:             weeksFromNow = moment().add({w: 1});\n 8718  \n 8719          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 8720:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 8721  \n 8722          weeksAgo = moment().subtract({w: 2});\n 8723:         weeksFromNow = moment().add({w: 2});\n 8724  \n 8725          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 8726:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 8727      });\n 8728  \n ....\n 9072      test('calendar all else', function (assert) {\n 9073          var weeksAgo = moment().subtract({w: 1}),\n 9074:             weeksFromNow = moment().add({w: 1});\n 9075  \n 9076          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 9077:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 9078  \n 9079          weeksAgo = moment().subtract({w: 2});\n 9080:         weeksFromNow = moment().add({w: 2});\n 9081  \n 9082          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 9083:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 9084      });\n 9085  \n ....\n 9431      test('calendar all else', function (assert) {\n 9432          var weeksAgo = moment().subtract({w: 1}),\n 9433:             weeksFromNow = moment().add({w: 1});\n 9434  \n 9435          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 9436:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 9437  \n 9438          weeksAgo = moment().subtract({w: 2});\n 9439:         weeksFromNow = moment().add({w: 2});\n 9440  \n 9441          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 9442:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 9443      });\n 9444  \n ....\n 9810      test('calendar all else', function (assert) {\n 9811          var weeksAgo = moment().subtract({w: 1}),\n 9812:             weeksFromNow = moment().add({w: 1});\n 9813  \n 9814          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 nädal tagasi');\n 9815:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '1 nädala pärast');\n 9816  \n 9817          weeksAgo = moment().subtract({w: 2});\n 9818:         weeksFromNow = moment().add({w: 2});\n 9819  \n 9820          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 nädalat tagasi');\n 9821:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '2 nädala pärast');\n 9822      });\n 9823  \n ....\n 10165      test('calendar all else', function (assert) {\n 10166          var weeksAgo = moment().subtract({w: 1}),\n 10167:             weeksFromNow = moment().add({w: 1});\n 10168  \n 10169          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 10170:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 10171  \n 10172          weeksAgo = moment().subtract({w: 2});\n 10173:         weeksFromNow = moment().add({w: 2});\n 10174  \n 10175          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 10176:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 10177      });\n 10178  \n .....\n 10513      test('calendar all else', function (assert) {\n 10514          var weeksAgo = moment().subtract({w: 1}),\n 10515:             weeksFromNow = moment().add({w: 1});\n 10516  \n 10517          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 10518:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 10519  \n 10520          weeksAgo = moment().subtract({w: 2});\n 10521:         weeksFromNow = moment().add({w: 2});\n 10522  \n 10523          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 10524:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 10525      });\n 10526  \n .....\n 10867      test('calendar all else', function (assert) {\n 10868          var weeksAgo = moment().subtract({w: 1}),\n 10869:             weeksFromNow = moment().add({w: 1});\n 10870  \n 10871          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  'yksi viikko sitten');\n 10872:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'yhden viikon päästä');\n 10873  \n 10874          weeksAgo = moment().subtract({w: 2});\n 10875:         weeksFromNow = moment().add({w: 2});\n 10876  \n 10877          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  'kaksi viikkoa sitten');\n 10878:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'kaden viikon päästä');\n 10879      });\n 10880  \n .....\n 11535      test('same all else', function (assert) {\n 11536          var weeksAgo = moment().subtract({w: 1}),\n 11537:             weeksFromNow = moment().add({w: 1});\n 11538  \n 11539          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 11540:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 11541  \n 11542          weeksAgo = moment().subtract({w: 2});\n 11543:         weeksFromNow = moment().add({w: 2});\n 11544  \n 11545          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 11546:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 11547      });\n 11548  \n .....\n 11889      test('same all else', function (assert) {\n 11890          var weeksAgo = moment().subtract({w: 1}),\n 11891:             weeksFromNow = moment().add({w: 1});\n 11892  \n 11893          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 11894:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 11895  \n 11896          weeksAgo = moment().subtract({w: 2});\n 11897:         weeksFromNow = moment().add({w: 2});\n 11898  \n 11899          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 11900:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 11901      });\n 11902  \n .....\n 12244      test('calendar all else', function (assert) {\n 12245          var weeksAgo = moment().subtract({w: 1}),\n 12246:             weeksFromNow = moment().add({w: 1});\n 12247  \n 12248          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 12249:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 12250  \n 12251          weeksAgo = moment().subtract({w: 2});\n 12252:         weeksFromNow = moment().add({w: 2});\n 12253  \n 12254          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 12255:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 12256      });\n 12257  \n .....\n 12608      test('calendar all else', function (assert) {\n 12609          var weeksAgo = moment().subtract({w: 1}),\n 12610:             weeksFromNow = moment().add({w: 1});\n 12611  \n 12612          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 12613:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 12614  \n 12615          weeksAgo = moment().subtract({w: 2});\n 12616:         weeksFromNow = moment().add({w: 2});\n 12617  \n 12618          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 12619:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 12620      });\n 12621  \n .....\n 12933      test('calendar all else', function (assert) {\n 12934          var weeksAgo = moment().subtract({w: 1}),\n 12935:             weeksFromNow = moment().add({w: 1});\n 12936  \n 12937          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 12938:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 12939  \n 12940          weeksAgo = moment().subtract({w: 2});\n 12941:         weeksFromNow = moment().add({w: 2});\n 12942  \n 12943          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 12944:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 12945      });\n 12946  \n .....\n 13288      test('calendar all else', function (assert) {\n 13289          var weeksAgo = moment().subtract({w: 1}),\n 13290:             weeksFromNow = moment().add({w: 1});\n 13291  \n 13292          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 13293:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 13294  \n 13295          weeksAgo = moment().subtract({w: 2});\n 13296:         weeksFromNow = moment().add({w: 2});\n 13297  \n 13298          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 13299:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 13300      });\n 13301  \n .....\n 13704      test('calendar all else', function (assert) {\n 13705          var weeksAgo = moment().subtract({w: 1}),\n 13706:             weeksFromNow = moment().add({w: 1});\n 13707  \n 13708          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 13709:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 13710  \n 13711          weeksAgo = moment().subtract({w: 2});\n 13712:         weeksFromNow = moment().add({w: 2});\n 13713  \n 13714          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 13715:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 13716      });\n 13717  \n .....\n 14073      test('calendar all else', function (assert) {\n 14074          var weeksAgo = moment().subtract({w: 1}),\n 14075:             weeksFromNow = moment().add({w: 1});\n 14076  \n 14077          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  'egy héte');\n 14078:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'egy hét múlva');\n 14079  \n 14080          weeksAgo = moment().subtract({w: 2});\n 14081:         weeksFromNow = moment().add({w: 2});\n 14082  \n 14083          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 hete');\n 14084:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '2 hét múlva');\n 14085      });\n 14086  \n .....\n 14498      test('calendar all else', function (assert) {\n 14499          var weeksAgo = moment().subtract({w: 1}),\n 14500:             weeksFromNow = moment().add({w: 1});\n 14501  \n 14502          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 14503:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 14504  \n 14505          weeksAgo = moment().subtract({w: 2});\n 14506:         weeksFromNow = moment().add({w: 2});\n 14507  \n 14508          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 14509:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 14510      });\n 14511  \n .....\n 14816      test('calendar all else', function (assert) {\n 14817          var weeksAgo = moment().subtract({w: 1}),\n 14818:             weeksFromNow = moment().add({w: 1});\n 14819  \n 14820          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 14821:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 14822  \n 14823          weeksAgo = moment().subtract({w: 2});\n 14824:         weeksFromNow = moment().add({w: 2});\n 14825  \n 14826          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 14827:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 14828      });\n 14829  \n .....\n 15190      test('calendar all else', function (assert) {\n 15191          var weeksAgo = moment().subtract({w: 1}),\n 15192:             weeksFromNow = moment().add({w: 1});\n 15193  \n 15194          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 15195:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 15196  \n 15197          weeksAgo = moment().subtract({w: 2});\n 15198:         weeksFromNow = moment().add({w: 2});\n 15199  \n 15200          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 15201:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 15202      });\n 15203  \n .....\n 15544      test('calendar all else', function (assert) {\n 15545          var weeksAgo = moment().subtract({w: 1}),\n 15546:             weeksFromNow = moment().add({w: 1});\n 15547  \n 15548          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 15549:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 15550  \n 15551          weeksAgo = moment().subtract({w: 2});\n 15552:         weeksFromNow = moment().add({w: 2});\n 15553  \n 15554          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 15555:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 15556      });\n 15557  \n .....\n 15862      test('calendar all else', function (assert) {\n 15863          var weeksAgo = moment().subtract({w: 1}),\n 15864:             weeksFromNow = moment().add({w: 1});\n 15865  \n 15866          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '1 week ago');\n 15867:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 15868  \n 15869          weeksAgo = moment().subtract({w: 2});\n 15870:         weeksFromNow = moment().add({w: 2});\n 15871  \n 15872          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '2 weeks ago');\n 15873:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 15874      });\n 15875  \n .....\n 16230      test('calendar all else', function (assert) {\n 16231          var weeksAgo = moment().subtract({w: 1}),\n 16232:             weeksFromNow = moment().add({w: 1});\n 16233  \n 16234          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 კვირის წინ');\n 16235:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '1 კვირაში');\n 16236  \n 16237          weeksAgo = moment().subtract({w: 2});\n 16238:         weeksFromNow = moment().add({w: 2});\n 16239  \n 16240          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 კვირის წინ');\n 16241:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  '2 კვირაში');\n 16242      });\n 16243  \n .....\n 16610                  w: 1\n 16611              }),\n 16612:             weeksFromNow = moment().add({\n 16613                  w: 1\n 16614              });\n 16615  \n 16616          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '1 week ago');\n 16617:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 1 week');\n 16618  \n 16619          weeksAgo = moment().subtract({\n 16620              w: 2\n 16621          });\n 16622:         weeksFromNow = moment().add({\n 16623              w: 2\n 16624          });\n 16625  \n 16626          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '2 weeks ago');\n 16627:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), 'in 2 weeks');\n 16628      });\n 16629  \n .....\n 17007      test('calendar all else', function (assert) {\n 17008          var weeksAgo = moment().subtract({w: 1}),\n 17009:             weeksFromNow = moment().add({w: 1});\n 17010  \n 17011          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 17012:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 17013  \n 17014          weeksAgo = moment().subtract({w: 2});\n 17015:         weeksFromNow = moment().add({w: 2});\n 17016  \n 17017          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 17018:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 17019      });\n 17020  \n .....\n 17605      test('calendar all else', function (assert) {\n 17606          var weeksAgo = moment().subtract({w: 1}),\n 17607:             weeksFromNow = moment().add({w: 1});\n 17608  \n 17609          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 17610:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 17611  \n 17612          weeksAgo = moment().subtract({w: 2});\n 17613:         weeksFromNow = moment().add({w: 2});\n 17614  \n 17615          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 17616:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 17617      });\n 17618  \n .....\n 17960      test('calendar all else', function (assert) {\n 17961          var weeksAgo = moment().subtract({w: 1}),\n 17962:             weeksFromNow = moment().add({w: 1});\n 17963  \n 17964          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 17965:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 17966  \n 17967          weeksAgo = moment().subtract({w: 2});\n 17968:         weeksFromNow = moment().add({w: 2});\n 17969  \n 17970          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 17971:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 17972      });\n 17973  \n .....\n 18330      test('calendar all else', function (assert) {\n 18331          var weeksAgo = moment().subtract({w: 1}),\n 18332:             weeksFromNow = moment().add({w: 1});\n 18333  \n 18334          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 18335:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 18336  \n 18337          weeksAgo = moment().subtract({w: 2});\n 18338:         weeksFromNow = moment().add({w: 2});\n 18339  \n 18340          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 18341:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 18342      });\n 18343  \n .....\n 18685      test('calendar all else', function (assert) {\n 18686          var weeksAgo = moment().subtract({w: 1}),\n 18687:             weeksFromNow = moment().add({w: 1});\n 18688  \n 18689          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 18690:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 18691  \n 18692          weeksAgo = moment().subtract({w: 2});\n 18693:         weeksFromNow = moment().add({w: 2});\n 18694  \n 18695          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 18696:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 18697      });\n 18698  \n .....\n 19056      test('calendar all else', function (assert) {\n 19057          var weeksAgo = moment().subtract({w: 1}),\n 19058:             weeksFromNow = moment().add({w: 1});\n 19059  \n 19060          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 19061:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 19062  \n 19063          weeksAgo = moment().subtract({w: 2});\n 19064:         weeksFromNow = moment().add({w: 2});\n 19065  \n 19066          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 19067:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 19068      });\n 19069  \n .....\n 19448      test('calendar all else', function (assert) {\n 19449          var weeksAgo = moment().subtract({w: 1}),\n 19450:             weeksFromNow = moment().add({w: 1});\n 19451  \n 19452          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 minggu lepas');\n 19453:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'dalam 1 minggu');\n 19454  \n 19455          weeksAgo = moment().subtract({w: 2});\n 19456:         weeksFromNow = moment().add({w: 2});\n 19457  \n 19458          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 minggu lepas');\n 19459:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'dalam 2 minggu');\n 19460      });\n 19461  \n .....\n 19897                  w: 1\n 19898              }),\n 19899:             weeksFromNow = moment().add({\n 19900                  w: 1\n 19901              });\n 19902  \n 19903          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), 'လွန်ခဲ့သော ၁ ပတ်က');\n 19904:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), '၁ ပတ်အတွင်း');\n 19905  \n 19906          weeksAgo = moment().subtract({\n 19907              w: 2\n 19908          });\n 19909:         weeksFromNow = moment().add({\n 19910              w: 2\n 19911          });\n 19912  \n 19913          assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '၂ ပတ် အရင်က');\n 19914:         assert.equal(weeksFromNow.calendar(), weeksFromNow.format('L'), '၂ ပတ် အတွင်း');\n 19915      });\n 19916  \n .....\n 20259      test('calendar all else', function (assert) {\n 20260          var weeksAgo = moment().subtract({w: 1}),\n 20261:             weeksFromNow = moment().add({w: 1});\n 20262  \n 20263          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 20264:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 20265  \n 20266          weeksAgo = moment().subtract({w: 2});\n 20267:         weeksFromNow = moment().add({w: 2});\n 20268  \n 20269          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 20270:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 20271      });\n 20272  \n .....\n 20613      test('calendar all else', function (assert) {\n 20614          var weeksAgo = moment().subtract({w: 1}),\n 20615:             weeksFromNow = moment().add({w: 1});\n 20616  \n 20617          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 20618:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 20619  \n 20620          weeksAgo = moment().subtract({w: 2});\n 20621:         weeksFromNow = moment().add({w: 2});\n 20622  \n 20623          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 20624:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 20625      });\n 20626  \n .....\n 20996      test('calendar all else', function (assert) {\n 20997          var weeksAgo = moment().subtract({w: 1}),\n 20998:             weeksFromNow = moment().add({w: 1});\n 20999  \n 21000          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 21001:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 21002  \n 21003          weeksAgo = moment().subtract({w: 2});\n 21004:         weeksFromNow = moment().add({w: 2});\n 21005  \n 21006          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 21007:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 21008      });\n 21009  \n .....\n 21356      test('calendar all else', function (assert) {\n 21357          var weeksAgo = moment().subtract({w: 1}),\n 21358:             weeksFromNow = moment().add({w: 1});\n 21359  \n 21360          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 21361:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 21362  \n 21363          weeksAgo = moment().subtract({w: 2});\n 21364:         weeksFromNow = moment().add({w: 2});\n 21365  \n 21366          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 21367:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 21368      });\n 21369  \n .....\n 21732      test('calendar all else', function (assert) {\n 21733          var weeksAgo = moment().subtract({w: 1}),\n 21734:             weeksFromNow = moment().add({w: 1});\n 21735  \n 21736          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 21737:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 21738  \n 21739          weeksAgo = moment().subtract({w: 2});\n 21740:         weeksFromNow = moment().add({w: 2});\n 21741  \n 21742          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 21743:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 21744      });\n 21745  \n .....\n 22085      test('calendar all else', function (assert) {\n 22086          var weeksAgo = moment().subtract({w: 1}),\n 22087:             weeksFromNow = moment().add({w: 1});\n 22088  \n 22089          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 22090:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 22091  \n 22092          weeksAgo = moment().subtract({w: 2});\n 22093:         weeksFromNow = moment().add({w: 2});\n 22094  \n 22095          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 22096:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 22097      });\n 22098  \n .....\n 22436      test('calendar all else', function (assert) {\n 22437          var weeksAgo = moment().subtract({w: 1}),\n 22438:             weeksFromNow = moment().add({w: 1});\n 22439  \n 22440          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 22441:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 22442  \n 22443          weeksAgo = moment().subtract({w: 2});\n 22444:         weeksFromNow = moment().add({w: 2});\n 22445  \n 22446          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 22447:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 22448      });\n 22449  \n .....\n 22799      test('calendar all else', function (assert) {\n 22800          var weeksAgo = moment().subtract({w: 1}),\n 22801:             weeksFromNow = moment().add({w: 1});\n 22802  \n 22803          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 22804:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 22805  \n 22806          weeksAgo = moment().subtract({w: 2});\n 22807:         weeksFromNow = moment().add({w: 2});\n 22808  \n 22809          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 22810:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 22811      });\n 22812  \n .....\n 23263      test('calendar all else', function (assert) {\n 23264          var weeksAgo = moment().subtract({w: 1}),\n 23265:             weeksFromNow = moment().add({w: 1});\n 23266  \n 23267          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 23268:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 23269  \n 23270          weeksAgo = moment().subtract({w: 2});\n 23271:         weeksFromNow = moment().add({w: 2});\n 23272  \n 23273          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 23274:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 23275      });\n 23276  \n .....\n 23699      test('calendar all else', function (assert) {\n 23700          var weeksAgo = moment().subtract({w: 1}),\n 23701:             weeksFromNow = moment().add({w: 1});\n 23702  \n 23703          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 23704:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 23705  \n 23706          weeksAgo = moment().subtract({w: 2});\n 23707:         weeksFromNow = moment().add({w: 2});\n 23708  \n 23709          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 23710:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 23711      });\n 23712  \n .....\n 24093      test('calendar all else', function (assert) {\n 24094          var weeksAgo = moment().subtract({w: 1}),\n 24095:             weeksFromNow = moment().add({w: 1});\n 24096  \n 24097          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 24098:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 24099  \n 24100          weeksAgo = moment().subtract({w: 2});\n 24101:         weeksFromNow = moment().add({w: 2});\n 24102  \n 24103          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 24104:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 24105      });\n 24106  \n .....\n 24464      test('calendar all else', function (assert) {\n 24465          var weeksAgo = moment().subtract({w: 1}),\n 24466:             weeksFromNow = moment().add({w: 1});\n 24467  \n 24468          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 24469:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 24470  \n 24471          weeksAgo = moment().subtract({w: 2});\n 24472:         weeksFromNow = moment().add({w: 2});\n 24473  \n 24474          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 24475:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 24476      });\n 24477  \n .....\n 24854      test('calendar all else', function (assert) {\n 24855          var weeksAgo = moment().subtract({w: 1}),\n 24856:             weeksFromNow = moment().add({w: 1});\n 24857  \n 24858          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 24859:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 24860  \n 24861          weeksAgo = moment().subtract({w: 2});\n 24862:         weeksFromNow = moment().add({w: 2});\n 24863  \n 24864          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 24865:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 24866      });\n 24867  \n .....\n 25244      test('calendar all else', function (assert) {\n 25245          var weeksAgo = moment().subtract({w: 1}),\n 25246:             weeksFromNow = moment().add({w: 1});\n 25247  \n 25248          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 25249:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 25250  \n 25251          weeksAgo = moment().subtract({w: 2});\n 25252:         weeksFromNow = moment().add({w: 2});\n 25253  \n 25254          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 25255:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 25256      });\n 25257  \n .....\n 25599      test('calendar all else', function (assert) {\n 25600          var weeksAgo = moment().subtract({w: 1}),\n 25601:             weeksFromNow = moment().add({w: 1});\n 25602  \n 25603          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 25604:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 25605  \n 25606          weeksAgo = moment().subtract({w: 2});\n 25607:         weeksFromNow = moment().add({w: 2});\n 25608  \n 25609          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 25610:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 25611      });\n 25612  \n .....\n 25955      test('calendar all else', function (assert) {\n 25956          var weeksAgo = moment().subtract({w: 1}),\n 25957:             weeksFromNow = moment().add({w: 1});\n 25958  \n 25959          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 25960:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 25961  \n 25962          weeksAgo = moment().subtract({w: 2});\n 25963:         weeksFromNow = moment().add({w: 2});\n 25964  \n 25965          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 25966:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 25967      });\n 25968  \n .....\n 26287      test('calendar all else', function (assert) {\n 26288          var weeksAgo = moment().subtract({w: 1}),\n 26289:             weeksFromNow = moment().add({w: 1});\n 26290  \n 26291          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '1 week ago');\n 26292:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 26293  \n 26294          weeksAgo = moment().subtract({w: 2});\n 26295:         weeksFromNow = moment().add({w: 2});\n 26296  \n 26297          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '2 weeks ago');\n 26298:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 26299      });\n 26300  \n .....\n 26641      test('same all else', function (assert) {\n 26642          var weeksAgo = moment().subtract({w: 1}),\n 26643:             weeksFromNow = moment().add({w: 1});\n 26644  \n 26645          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 26646:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 26647  \n 26648          weeksAgo = moment().subtract({w: 2});\n 26649:         weeksFromNow = moment().add({w: 2});\n 26650  \n 26651          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 26652:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 26653      });\n 26654  \n .....\n 27007      test('calendar all else', function (assert) {\n 27008          var weeksAgo = moment().subtract({w: 1}),\n 27009:             weeksFromNow = moment().add({w: 1});\n 27010  \n 27011          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 27012:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 27013  \n 27014          weeksAgo = moment().subtract({w: 2});\n 27015:         weeksFromNow = moment().add({w: 2});\n 27016  \n 27017          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 27018:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 27019      });\n 27020  \n .....\n 27362      test('calendar all else', function (assert) {\n 27363          var weeksAgo = moment().subtract({w: 1}),\n 27364:             weeksFromNow = moment().add({w: 1});\n 27365  \n 27366          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 27367:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 27368  \n 27369          weeksAgo = moment().subtract({w: 2});\n 27370:         weeksFromNow = moment().add({w: 2});\n 27371  \n 27372          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 27373:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 27374      });\n 27375  \n .....\n 27715      test('calendar all else', function (assert) {\n 27716          var weeksAgo = moment().subtract({w: 1}),\n 27717:             weeksFromNow = moment().add({w: 1});\n 27718  \n 27719          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 27720:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 27721  \n 27722          weeksAgo = moment().subtract({w: 2});\n 27723:         weeksFromNow = moment().add({w: 2});\n 27724  \n 27725          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 27726:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 27727      });\n 27728  \n .....\n 28101      test('calendar all else', function (assert) {\n 28102          var weeksAgo = moment().subtract({w: 1}),\n 28103:             weeksFromNow = moment().add({w: 1});\n 28104  \n 28105          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 28106:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 28107  \n 28108          weeksAgo = moment().subtract({w: 2});\n 28109:         weeksFromNow = moment().add({w: 2});\n 28110  \n 28111          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 28112:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 28113      });\n 28114  \n .....\n 28457      test('calendar all else', function (assert) {\n 28458          var weeksAgo = moment().subtract({w: 1}),\n 28459:             weeksFromNow = moment().add({w: 1});\n 28460  \n 28461          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 28462:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 28463  \n 28464          weeksAgo = moment().subtract({w: 2});\n 28465:         weeksFromNow = moment().add({w: 2});\n 28466  \n 28467          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 28468:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 28469      });\n 28470  \n .....\n 28823      test('calendar all else', function (assert) {\n 28824          var weeksAgo = moment().subtract({w: 1}),\n 28825:             weeksFromNow = moment().add({w: 1});\n 28826  \n 28827          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '1 week ago');\n 28828:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 28829  \n 28830          weeksAgo = moment().subtract({w: 2});\n 28831:         weeksFromNow = moment().add({w: 2});\n 28832  \n 28833          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),  '2 weeks ago');\n 28834:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 28835      });\n 28836  \n .....\n 29166      test('calendar all else', function (assert) {\n 29167          var weeksAgo = moment().subtract({w: 1}),\n 29168:             weeksFromNow = moment().add({w: 1});\n 29169  \n 29170          assert.equal(weeksAgo.calendar(),       weeksAgo.format('LL'),      '1 week ago');\n 29171:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('LL'),  'in 1 week');\n 29172  \n 29173          weeksAgo = moment().subtract({w: 2});\n 29174:         weeksFromNow = moment().add({w: 2});\n 29175  \n 29176          assert.equal(weeksAgo.calendar(),       weeksAgo.format('LL'),      '2 weeks ago');\n 29177:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('LL'),  'in 2 weeks');\n 29178      });\n 29179  \n .....\n 29498      test('calendar all else', function (assert) {\n 29499          var weeksAgo = moment().subtract({w: 1}),\n 29500:             weeksFromNow = moment().add({w: 1});\n 29501  \n 29502          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '1 week ago');\n 29503:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 1 week');\n 29504  \n 29505          weeksAgo = moment().subtract({w: 2});\n 29506:         weeksFromNow = moment().add({w: 2});\n 29507  \n 29508          assert.equal(weeksAgo.calendar(),       weeksAgo.format('L'),      '2 weeks ago');\n 29509:         assert.equal(weeksFromNow.calendar(),   weeksFromNow.format('L'),  'in 2 weeks');\n 29510      });\n 29511  \n\n/home/victor/Documents/switch/sb-admin-angular/node_modules/karma/node_modules/socket.io/node_modules/socket.io-client/node_modules/active-x-obfuscator/node_modules/zeparser/benchmark.html:\n 61096  ZmMsg.externalAccessPopCurrentValue=\"Current value is to only download mail that has arrived after {0,date,short} at {0,time,short}.\";\n 61097  ZmMsg.externalAccessPopDownloadAll=\"Allow all mail, including old mail, to be downloaded\";\n 61098: ZmMsg.externalAccessPopDownloadFromNow=\"Allow only mail from now to be downloaded\";\n 61099  ZmMsg.externalAccessPopNotSet=\"Current value is to download all mail, including old mail.\";\n 61100  ZmMsg.externalImages=\"External images are not displayed.\";\n .....\n 104854  );\n 104855  ZmPref.registerPref(\"POP_DOWNLOAD_SINCE\",{\n 104856: displayContainer:ZmPref.TYPE_RADIO_GROUP,displayOptions:[ZmMsg.externalAccessPopDownloadAll,\"*** NOT SHOWN ***\",ZmMsg.externalAccessPopDownloadFromNow],options:[ZmMailApp.POP_DOWNLOAD_SINCE_ALL,ZmMailApp.POP_DOWNLOAD_SINCE_NO_CHANGE,ZmMailApp.POP_DOWNLOAD_SINCE_FROM_NOW],displayFunction:ZmPref.downloadSinceDisplay,valueFunction:ZmPref.downloadSinceValue,precondition:ZmSetting.POP_ENABLED}\n 104857  );\n 104858  ZmPref.registerPref(\"REPLY_TO_ADDRESS\",{\n\n939 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 114122,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 80.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"linte",
				"Preferences: SublimeLinter Settings – Default"
			],
			[
				"package",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"paka",
				"Package Control: Remove Package"
			],
			[
				"reinsta",
				"Package Control: Advanced Install Package"
			],
			[
				"lint",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"status",
				"Git: Status"
			],
			[
				"form",
				"Standard Format: Format current file"
			],
			[
				"sta",
				"Standard Format: Format current file"
			],
			[
				"forma",
				"Format: JavaScript Standard Style"
			],
			[
				"format",
				"Format: JavaScript Standard Style"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"standard",
				"Standard Format: Toggle format on save"
			],
			[
				"pu",
				"Git: Push"
			],
			[
				"stat",
				"Git: Status"
			],
			[
				"defini",
				"AngularJS: Look Up Definition"
			],
			[
				"dev",
				"DevDocs: Search From Selection"
			],
			[
				"snippet sele",
				"Snippet: <select>"
			],
			[
				"bea",
				"HTMLBeautify"
			],
			[
				"git",
				"Git: Diff"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"html",
				"HTMLBeautify"
			],
			[
				"git-fl",
				"Git-flow: Init With Defaults"
			],
			[
				"remote",
				"Git: Remote"
			],
			[
				"git ",
				"Git: Status"
			],
			[
				"pus",
				"Git: Push"
			],
			[
				"ang",
				"AngularJS: Rebuild Search Index"
			],
			[
				"emmet ta",
				"Emmet: Expand Abbreviation"
			],
			[
				"angular",
				"AngularJS: Look Up Definition"
			],
			[
				"linter",
				"SublimeLinter: Show All Errors"
			],
			[
				"an",
				"AngularJS: Rebuild Search Index"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"for",
				"Format: Javascript"
			],
			[
				"beau",
				"HTMLBeautify"
			],
			[
				"ht",
				"HTMLBeautify"
			],
			[
				"renam",
				"Emmet: Rename Tag"
			],
			[
				"ren",
				"Emmet: Rename Tag"
			],
			[
				"lo",
				"Git: Log"
			],
			[
				"log",
				"Git: Log"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"Package Control: ",
				"Package Control: Discover Packages"
			],
			[
				"grun",
				"Grunt"
			],
			[
				"",
				"AngularJS: Look Up Definition"
			],
			[
				"look",
				"AngularJS: Look Up Definition"
			],
			[
				"li",
				"SublimeLinter: Lint This View"
			],
			[
				"err",
				"SublimeLinter: Show All Errors"
			],
			[
				"er",
				"SublimeLinter: Show All Errors"
			],
			[
				"error",
				"SublimeLinter: Show All Errors"
			],
			[
				"st",
				"Git: Status"
			],
			[
				"diff",
				"Git: Diff"
			],
			[
				"legit",
				"Legit: Branches"
			],
			[
				"lin",
				"SublimeLinter: Lint This View"
			],
			[
				"sub",
				"SublimeLinter: Show All Errors"
			],
			[
				"fe",
				"Git: Fetch"
			],
			[
				"g",
				"Git: Status"
			],
			[
				"remot",
				"Git: Add Remote"
			],
			[
				"side",
				"View: Toggle Side Bar"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 838.0
	},
	"console":
	{
		"height": 180.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": true,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": true,
		"status_bar_visible": true
	},
	"expanded_folders":
	[
		"/home/victor/Documents/switch/sb-admin-angular",
		"/home/victor/Documents/switch/sb-admin-angular/app",
		"/home/victor/Documents/switch/sb-admin-angular/app/clientes",
		"/home/victor/Documents/switch/sb-admin-angular/app/clientes/js",
		"/home/victor/Documents/switch/sb-admin-angular/app/clientes/js/controllers",
		"/home/victor/Documents/switch/sb-admin-angular/app/clientes/js/services",
		"/home/victor/Documents/switch/sb-admin-angular/app/clientes/views",
		"/home/victor/Documents/switch/sb-admin-angular/app/clientes/views/modals",
		"/home/victor/Documents/switch/sb-admin-angular/app/productos",
		"/home/victor/Documents/switch/sb-admin-angular/app/productos/js",
		"/home/victor/Documents/switch/sb-admin-angular/app/productos/js/controllers",
		"/home/victor/Documents/switch/sb-admin-angular/app/productos/js/controllers/modals",
		"/home/victor/Documents/switch/sb-admin-angular/app/productos/views",
		"/home/victor/Documents/switch/sb-admin-angular/app/productos/views/modals",
		"/home/victor/Documents/switch/sb-admin-angular/app/security",
		"/home/victor/Documents/switch/sb-admin-angular/app/security/controllers",
		"/home/victor/Documents/switch/sb-admin-angular/app/security/services",
		"/home/victor/Documents/switch/sb-admin-angular/dist"
	],
	"file_history":
	[
		"/home/victor/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/victor/Documents/switch/sb-admin-angular/dist/scripts/app.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/js/sb-admin-2.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/clientes/js/controllers/ClienteCtrl.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/pedidos/views/modals/crear-pedido-modal.html",
		"/home/victor/Documents/switch/sb-admin-angular/app/pedidos/js/services/Pedido.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/pedidos/views/pedidos.pendientes.html",
		"/home/victor/Documents/switch/sb-admin-angular/app/pedidos/js/directives/TarjetaPedido.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/productos/js/controllers/BebidasCtrl.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower.json",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/directives/sidebar/sidebar.html",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/app.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/security/services/loginInterceptor.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/services/ApiHost.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/index.html",
		"/home/victor/Documents/switch/sb-admin-angular/app/security/services/Principal.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/security/controllers/LoginCtrl.js",
		"/home/victor/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/home/victor/.config/sublime-text-3/Packages/User/StandardFormat.sublime-settings",
		"/home/victor/Documents/switch/sb-admin-angular/app/views/pages/login.html",
		"/home/victor/Documents/switch/sb-admin-angular/app/security/services/Authorization.js",
		"/home/victor/Documents/switch/sb-admin-angular/Gruntfile.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/restangular/Gruntfile.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/controllers/form.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/controllers/main.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/productos/views/platos.html",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-contrib-jshint/node_modules/jshint/dist/jshint-rhino.js",
		"/home/victor/Documents/switch/sb-admin-angular/test/spec/controllers/BebidasCtrl.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/pedidos/js/controllers/ListaPedidosCtrl.js",
		"/home/victor/.config/sublime-text-3/Packages/StandardFormat/README.md",
		"/home/victor/.config/sublime-text-3/Packages/StandardFormat/StandardFormat.sublime-settings",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/controllers/chartContoller.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/pedidos/js/controllers/PedidosPendientesCtrl.js",
		"/home/victor/Documents/switch/sb-admin-angular/test/spec/controllers/main.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/restangular/.jshintrc",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/es5-shim/es5-sham.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/views/pages/blank.html",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/controllers/ClienteCtrl.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/controllers/BebidasCtrl.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/controllers/PlatosCtrl.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/views/pedidos/pedidos.html",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/bootstrap/dist/css/bootstrap.css",
		"/home/victor/Documents/switch/sb-admin-angular/app/views/productos/platos.html",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/controllers/PedidosCtrl.js",
		"/home/victor/Documents/switch/sb-admin-angular/.jshintrc",
		"/home/victor/Documents/switch/sb-admin-angular/app/views/clientes/main.html",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/ng-grid/README.md",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular-chart.js/angular-chart.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/directives/sidebar/sidebar.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/controllers/Bebidas",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/metisMenu/Gruntfile.js",
		"/home/victor/Documents/switch/simple-angular-app/app/scripts/controllers/todo.js",
		"/home/victor/Documents/switch/simple-angular-app/app/scripts/app.js",
		"/home/victor/Documents/switch/simple-angular-app/bower_components/angular-ui-select/dist/select.css",
		"/home/victor/Documents/switch/simple-angular-app/Gruntfile.js",
		"/home/victor/Documents/switch/simple-angular-app/app/views/navbar-widget.html",
		"/home/victor/Documents/switch/simple-angular-app/package.json",
		"/home/victor/Documents/switch/geeklab201503/package.json",
		"/home/victor/Documents/switch/simple-angular-app/app/scripts/directives/my-video-recorder.js",
		"/home/victor/Documents/switch/simple-angular-app/app/views/video.html",
		"/home/victor/Documents/switch/simple-angular-app/app/scripts/directives/navbaritem.js",
		"/home/victor/Documents/switch/simple-angular-app/app/scripts/directives/navbarwidget.js",
		"/home/victor/Documents/switch/simple-angular-app/bower.json",
		"/home/victor/Documents/switch/simple-angular-app/app/index.html",
		"/home/victor/Documents/switch/simple-angular-app/app/views/navbar-item.html",
		"/home/victor/Documents/switch/simple-angular-app/app/views/todo.html",
		"/home/victor/Documents/switch/simple-angular-app/simple-app.sublime-project",
		"/home/victor/Documents/switch/simple-angular-app/README.md",
		"/home/victor/Documents/switch/geeklab201503/bower.json",
		"/home/victor/Documents/switch/geeklab201503/Gruntfile.coffee",
		"/home/victor/Documents/switch/simple-angular-app/bower_components/video.js/dist/video-js/video.dev.js",
		"/home/victor/Documents/switch/simple-angular-app/bower_components/angular-ui-select2/README.md",
		"/home/victor/Documents/switch/simple-angular-app/bower_components/angular-ui-select/README.md",
		"/home/victor/Documents/switch/simple-angular-app/app/styles/main.css",
		"/home/victor/Documents/switch/simple-angular-app/app/scripts/controllers/navbarcontroller.js",
		"/home/victor/Documents/switch/simple-angular-app/bower_components/ng-lodash/build/ng-lodash.js",
		"/home/victor/Documents/switch/simple-angular-app/test/spec/e2e/conf.js",
		"/home/victor/Documents/switch/simple-angular-app/app/scripts/controllers/calc.js",
		"/home/victor/Documents/switch/simple-angular-app/app/views/calc.html",
		"/home/victor/Documents/switch/simple-angular-app/test/spec/e2e/spec.js",
		"/home/victor/Documents/switch/simple-angular-app/e2e/spec.js",
		"/home/victor/Documents/switch/simple-angular-app/e2e/conf.js",
		"/home/victor/Documents/switch/simple-angular-app/test/spec/controllers/calc.js",
		"/home/victor/Documents/switch/geeklab201503/bower_components/reveal.js/css/reveal.css",
		"/home/victor/Documents/switch/geeklab201503/bower_components/reveal.js/plugin/highlight/highlight.js",
		"/home/victor/Documents/switch/geeklab201503/templates/_index.html",
		"/home/victor/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/victor/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/victor/.config/sublime-text-3/Packages/Grunt/SublimeGrunt.sublime-settings",
		"/home/victor/.config/sublime-text-3/Packages/User/SublimeGrunt.sublime-settings",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/oclazyload/dist/ocLazyLoad.js",
		"/home/victor/Documents/switch/sb-admin-angular/app/views/chart.html",
		"/home/victor/Documents/switch/sb-admin-angular/app/scripts/directives/sidebar/sidebar-search/sidebar-search.js",
		"/home/victor/software/Aptana_Studio_3/AptanaStudio3.sh",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular-animate/angular-animate.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular/angular.min.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular/angular-csp.css",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular/angular.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-autoprefixer/node_modules/autoprefixer/node_modules/caniuse-db/region-usage-json/alt-na.json",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-contrib-clean/AUTHORS",
		"/home/victor/Documents/switch/sb-admin-angular/app/views/ui-elements/notifications.html",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/oclazyload/examples/requireJSExample/css/ng-grid.css",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/karma-phantomjs-launcher/node_modules/phantomjs/node_modules/npmconf/node_modules/uid-number/get-uid-gid.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/es5-shim/CHANGES",
		"/home/victor/Documents/switch/sb-admin-angular/app/views/dashboard/home.html",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-google-cdn/node_modules/chalk/node_modules/.bin/has-ansi",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/karma/node_modules/http-proxy/node_modules/utile/node_modules/i/test/inflector/inflections-test.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/karma/node_modules/http-proxy/test/core/simple/test-http-many-keep-alive-connections.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-contrib-cssmin/node_modules/clean-css/lib/properties/shorthand-notations.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular-toggle-switch/angular-toggle-switch.min.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/karma/node_modules/connect/node_modules/body-parser/node_modules/iconv-lite/encodings/tables/shiftjis.json",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/karma/node_modules/http-proxy/node_modules/utile/node_modules/i/lib/inflections.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/jquery/src/manipulation.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-autoprefixer/node_modules/autoprefixer/node_modules/caniuse-db/features-json/screen-orientation.json",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-autoprefixer/node_modules/autoprefixer/node_modules/postcss/lib/declaration.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-contrib-imagemin/node_modules/imagemin/node_modules/imagemin-svgo/node_modules/svgo/node_modules/sax/test/parser-position.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-svgmin/node_modules/svgo/node_modules/sax/test/parser-position.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-ng-annotate/node_modules/ng-annotate/pos-to-linecolumn.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-contrib-cssmin/node_modules/maxmin/node_modules/gzip-size/node_modules/zlib-browserify/node_modules/tape/test/plan_optional.js",
		"/home/victor/Documents/switch/sb-admin-angular/package.json",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular-sanitize/angular-sanitize.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-contrib-htmlmin/node_modules/html-minifier/node_modules/clean-css/lib/properties/override-compactor.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/jquery/src/offset.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular-scenario/angular-scenario.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular-resource/angular-resource.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular-loading-bar/src/loading-bar.js",
		"/home/victor/Documents/switch/sb-admin-angular/bower_components/angular-loading-bar/build/loading-bar.js",
		"/home/victor/Documents/switch/sb-admin-angular/node_modules/grunt-google-cdn/node_modules/bower/lib/commands/lookup.js"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/victor/Documents/switch/sb-admin-angular",
			"/home/victor/Documents/switch/sb-admin-angular/app",
			"*.js,/home/victor/Documents/switch/sb-admin-angular/app/security/**.js",
			"*.js,/home/victor/Documents/switch/sb-admin-angular/app/security",
			"*.js",
			"/home/victor/Documents/switch/geeklab201503/slides",
			"*.html",
			"*,/home/victor/Documents/switch/sb-admin-angular/app/scripts",
			"*",
			"*.html",
			"",
			"*"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"loginI",
			"login",
			"vendor",
			"boot",
			"crearC",
			"FromNow",
			"splash",
			"cookie",
			"            \n",
			"Api",
			"login",
			"run",
			"retrieve",
			"data",
			"sec",
			"updatePedidos",
			"pedidos",
			"')",
			"global",
			"jshint",
			"def",
			"var",
			"no-",
			"glob",
			"undef",
			"// jshint",
			"//jshint",
			"log",
			"dropDown",
			"close",
			"minim",
			"min",
			"form-",
			"Bebida",
			"bebida",
			"Bebida",
			"Bebidas",
			"wire",
			"side",
			"\"",
			".\n",
			"img",
			"code",
			"ngGrid",
			"    <",
			"jshint",
			"dropDown",
			"sidebar",
			"char",
			".content",
			"content",
			"d3",
			"global",
			"\"",
			"angular",
			"js",
			"data-ele",
			"data-",
			"data-*",
			"data-font",
			"data-color",
			"data-theme",
			"data-background",
			"img",
			"im",
			"background",
			"createSingletonNode",
			"reveal",
			"jsh",
			"code"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Plato",
			"plato",
			"Plato",
			"Platos",
			"'"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 11,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/productos/views/bebidas.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2013,
						"regions":
						{
						},
						"selection":
						[
							[
								1331,
								1331
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 309.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/views/dashboard/main.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 441,
						"regions":
						{
						},
						"selection":
						[
							[
								86,
								86
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "app/pedidos/views/pedidos.list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3051,
						"regions":
						{
						},
						"selection":
						[
							[
								1597,
								1597
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "app/security/services/Principal.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1919,
						"regions":
						{
						},
						"selection":
						[
							[
								230,
								230
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "app/security/services/Authorization.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 765,
						"regions":
						{
						},
						"selection":
						[
							[
								227,
								227
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "bower.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 967,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "bower.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 967,
						"regions":
						{
						},
						"selection":
						[
							[
								917,
								917
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Gruntfile.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10951,
						"regions":
						{
						},
						"selection":
						[
							[
								5390,
								5390
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2322.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "app/productos/views/modals/crear-bebida-modal.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 974,
						"regions":
						{
						},
						"selection":
						[
							[
								50,
								50
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "app/productos/js/controllers/modals/CrearBebidaModalInstanceCtrl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 299,
						"regions":
						{
						},
						"selection":
						[
							[
								299,
								299
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/victor/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6287,
						"regions":
						{
						},
						"selection":
						[
							[
								6287,
								6287
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": -0.0,
						"translation.y": 2646.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/victor/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16856,
						"regions":
						{
						},
						"selection":
						[
							[
								16856,
								16856
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4860.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/victor/.config/sublime-text-3/Packages/JsFormat/JsFormat.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 468,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/home/victor/.config/sublime-text-3/Packages/User/JsFormat.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 465,
						"regions":
						{
						},
						"selection":
						[
							[
								387,
								387
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/home/victor/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 999,
						"regions":
						{
						},
						"selection":
						[
							[
								468,
								468
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": ".jshintrc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3501,
						"regions":
						{
						},
						"selection":
						[
							[
								713,
								713
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "app/scripts/app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13460,
						"regions":
						{
						},
						"selection":
						[
							[
								13460,
								13460
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 6984.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "app/clientes/views/main.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 858,
						"regions":
						{
						},
						"selection":
						[
							[
								756,
								756
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 129.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "app/pedidos/views/pedidos.pendientes.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2016,
						"regions":
						{
						},
						"selection":
						[
							[
								1484,
								1484
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 669.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "dist/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1585,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 432.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "app/security/services/loginInterceptor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1236,
						"regions":
						{
						},
						"selection":
						[
							[
								339,
								339
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 762,
						"regions":
						{
						},
						"selection":
						[
							[
								592,
								592
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "app/scripts/directives/header/header-notification/header-notification.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8416,
						"regions":
						{
						},
						"selection":
						[
							[
								8260,
								8260
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2430.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "app/security/controllers/LoginCtrl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1274,
						"regions":
						{
						},
						"selection":
						[
							[
								1274,
								1274
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "app/pedidos/js/controllers/PedidosPendientesCtrl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2242,
						"regions":
						{
						},
						"selection":
						[
							[
								921,
								921
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "app/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5128,
						"regions":
						{
						},
						"selection":
						[
							[
								446,
								446
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "app/pedidos/js/directives/TarjetaPedido.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 826,
						"regions":
						{
						},
						"selection":
						[
							[
								178,
								178
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "app/clientes/views/modals/crear-cliente-modal.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1119,
						"regions":
						{
						},
						"selection":
						[
							[
								146,
								146
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				}
			]
		},
		{
			"selected": 15,
			"sheets":
			[
				{
					"buffer": 27,
					"file": "app/pedidos/views/modals/ver-pedido-modal.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 505,
						"regions":
						{
						},
						"selection":
						[
							[
								479,
								479
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/AngularJS/AngularJS.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "app/clientes/js/controllers/ClienteCtrl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2111,
						"regions":
						{
						},
						"selection":
						[
							[
								528,
								528
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "app/clientes/views/main.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 858,
						"regions":
						{
						},
						"selection":
						[
							[
								827,
								827
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 126.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "app/security/services/loginInterceptor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1236,
						"regions":
						{
						},
						"selection":
						[
							[
								169,
								169
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "app/scripts/services/ApiHost.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 220,
						"regions":
						{
						},
						"selection":
						[
							[
								220,
								220
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "app/security/services/Principal.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1919,
						"regions":
						{
						},
						"selection":
						[
							[
								1918,
								1918
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1073.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "app/security/controllers/LoginCtrl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1274,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "app/pedidos/js/controllers/VerPedidoModalInstanceCtrl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 343,
						"regions":
						{
						},
						"selection":
						[
							[
								228,
								228
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "app/pedidos/js/controllers/ListaPedidosCtrl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3557,
						"regions":
						{
						},
						"selection":
						[
							[
								751,
								751
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 308.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "app/pedidos/js/controllers/PedidosCtrl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3233,
						"regions":
						{
						},
						"selection":
						[
							[
								1191,
								1191
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 648.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "app/clientes/js/controllers/CrearClienteModalInstanceCtrl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 773,
						"regions":
						{
						},
						"selection":
						[
							[
								295,
								295
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 108.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "app/clientes/js/services/Cliente.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 490,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "app/scripts/filters/FromNow.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 215,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 36,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 114122,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										256,
										263
									],
									[
										575,
										582
									],
									[
										741,
										748
									],
									[
										768,
										775
									],
									[
										885,
										892
									],
									[
										1052,
										1059
									],
									[
										1079,
										1086
									],
									[
										1283,
										1290
									],
									[
										1449,
										1456
									],
									[
										1476,
										1483
									],
									[
										1593,
										1600
									],
									[
										1760,
										1767
									],
									[
										1787,
										1794
									],
									[
										1991,
										1998
									],
									[
										2157,
										2164
									],
									[
										2184,
										2191
									],
									[
										2301,
										2308
									],
									[
										2468,
										2475
									],
									[
										2495,
										2502
									],
									[
										2636,
										2643
									],
									[
										2839,
										2846
									],
									[
										2864,
										2871
									],
									[
										3016,
										3023
									],
									[
										3212,
										3219
									],
									[
										3237,
										3244
									],
									[
										3440,
										3447
									],
									[
										3606,
										3613
									],
									[
										3633,
										3640
									],
									[
										3750,
										3757
									],
									[
										3917,
										3924
									],
									[
										3944,
										3951
									],
									[
										4148,
										4155
									],
									[
										4314,
										4321
									],
									[
										4341,
										4348
									],
									[
										4458,
										4465
									],
									[
										4625,
										4632
									],
									[
										4652,
										4659
									],
									[
										4856,
										4863
									],
									[
										5022,
										5029
									],
									[
										5049,
										5056
									],
									[
										5166,
										5173
									],
									[
										5333,
										5340
									],
									[
										5360,
										5367
									],
									[
										5564,
										5571
									],
									[
										5730,
										5737
									],
									[
										5757,
										5764
									],
									[
										5874,
										5881
									],
									[
										6041,
										6048
									],
									[
										6068,
										6075
									],
									[
										6272,
										6279
									],
									[
										6438,
										6445
									],
									[
										6465,
										6472
									],
									[
										6582,
										6589
									],
									[
										6749,
										6756
									],
									[
										6776,
										6783
									],
									[
										6980,
										6987
									],
									[
										7146,
										7153
									],
									[
										7173,
										7180
									],
									[
										7290,
										7297
									],
									[
										7457,
										7464
									],
									[
										7484,
										7491
									],
									[
										7667,
										7674
									],
									[
										7833,
										7840
									],
									[
										7860,
										7867
									],
									[
										7977,
										7984
									],
									[
										8144,
										8151
									],
									[
										8171,
										8178
									],
									[
										8375,
										8382
									],
									[
										8541,
										8548
									],
									[
										8568,
										8575
									],
									[
										8685,
										8692
									],
									[
										8852,
										8859
									],
									[
										8879,
										8886
									],
									[
										9083,
										9090
									],
									[
										9249,
										9256
									],
									[
										9276,
										9283
									],
									[
										9393,
										9400
									],
									[
										9560,
										9567
									],
									[
										9587,
										9594
									],
									[
										9791,
										9798
									],
									[
										9957,
										9964
									],
									[
										9984,
										9991
									],
									[
										10101,
										10108
									],
									[
										10268,
										10275
									],
									[
										10295,
										10302
									],
									[
										10499,
										10506
									],
									[
										10665,
										10672
									],
									[
										10692,
										10699
									],
									[
										10809,
										10816
									],
									[
										10976,
										10983
									],
									[
										11003,
										11010
									],
									[
										11203,
										11210
									],
									[
										11369,
										11376
									],
									[
										11396,
										11403
									],
									[
										11513,
										11520
									],
									[
										11680,
										11687
									],
									[
										11707,
										11714
									],
									[
										11911,
										11918
									],
									[
										12070,
										12077
									],
									[
										12095,
										12102
									],
									[
										12211,
										12218
									],
									[
										12371,
										12378
									],
									[
										12396,
										12403
									],
									[
										12599,
										12606
									],
									[
										12765,
										12772
									],
									[
										12792,
										12799
									],
									[
										12909,
										12916
									],
									[
										13076,
										13083
									],
									[
										13103,
										13110
									],
									[
										13307,
										13314
									],
									[
										13473,
										13480
									],
									[
										13500,
										13507
									],
									[
										13617,
										13624
									],
									[
										13784,
										13791
									],
									[
										13811,
										13818
									],
									[
										14015,
										14022
									],
									[
										14181,
										14188
									],
									[
										14208,
										14215
									],
									[
										14325,
										14332
									],
									[
										14492,
										14499
									],
									[
										14519,
										14526
									],
									[
										14723,
										14730
									],
									[
										14889,
										14896
									],
									[
										14916,
										14923
									],
									[
										15033,
										15040
									],
									[
										15200,
										15207
									],
									[
										15227,
										15234
									],
									[
										15431,
										15438
									],
									[
										15597,
										15604
									],
									[
										15624,
										15631
									],
									[
										15741,
										15748
									],
									[
										15908,
										15915
									],
									[
										15935,
										15942
									],
									[
										16139,
										16146
									],
									[
										16305,
										16312
									],
									[
										16332,
										16339
									],
									[
										16449,
										16456
									],
									[
										16616,
										16623
									],
									[
										16643,
										16650
									],
									[
										16847,
										16854
									],
									[
										17013,
										17020
									],
									[
										17040,
										17047
									],
									[
										17157,
										17164
									],
									[
										17324,
										17331
									],
									[
										17351,
										17358
									],
									[
										17555,
										17562
									],
									[
										17721,
										17728
									],
									[
										17748,
										17755
									],
									[
										17865,
										17872
									],
									[
										18032,
										18039
									],
									[
										18059,
										18066
									],
									[
										18263,
										18270
									],
									[
										18433,
										18440
									],
									[
										18460,
										18467
									],
									[
										18583,
										18590
									],
									[
										18755,
										18762
									],
									[
										18782,
										18789
									],
									[
										18994,
										19001
									],
									[
										19163,
										19170
									],
									[
										19190,
										19197
									],
									[
										19310,
										19317
									],
									[
										19480,
										19487
									],
									[
										19507,
										19514
									],
									[
										19717,
										19724
									],
									[
										19886,
										19893
									],
									[
										19913,
										19920
									],
									[
										20033,
										20040
									],
									[
										20203,
										20210
									],
									[
										20230,
										20237
									],
									[
										20440,
										20447
									],
									[
										20617,
										20624
									],
									[
										20644,
										20651
									],
									[
										20774,
										20781
									],
									[
										20953,
										20960
									],
									[
										20980,
										20987
									],
									[
										21195,
										21202
									],
									[
										21364,
										21371
									],
									[
										21391,
										21398
									],
									[
										21511,
										21518
									],
									[
										21681,
										21688
									],
									[
										21708,
										21715
									],
									[
										21914,
										21921
									],
									[
										22083,
										22090
									],
									[
										22110,
										22117
									],
									[
										22230,
										22237
									],
									[
										22400,
										22407
									],
									[
										22427,
										22434
									],
									[
										22637,
										22644
									],
									[
										22806,
										22813
									],
									[
										22833,
										22840
									],
									[
										22953,
										22960
									],
									[
										23123,
										23130
									],
									[
										23150,
										23157
									],
									[
										23360,
										23367
									],
									[
										23529,
										23536
									],
									[
										23556,
										23563
									],
									[
										23676,
										23683
									],
									[
										23846,
										23853
									],
									[
										23873,
										23880
									],
									[
										24083,
										24090
									],
									[
										24252,
										24259
									],
									[
										24279,
										24286
									],
									[
										24399,
										24406
									],
									[
										24569,
										24576
									],
									[
										24596,
										24603
									],
									[
										24806,
										24813
									],
									[
										24975,
										24982
									],
									[
										25002,
										25009
									],
									[
										25122,
										25129
									],
									[
										25292,
										25299
									],
									[
										25319,
										25326
									],
									[
										25529,
										25536
									],
									[
										25698,
										25705
									],
									[
										25725,
										25732
									],
									[
										25845,
										25852
									],
									[
										26015,
										26022
									],
									[
										26042,
										26049
									],
									[
										26252,
										26259
									],
									[
										26419,
										26426
									],
									[
										26446,
										26453
									],
									[
										26570,
										26577
									],
									[
										26735,
										26742
									],
									[
										26762,
										26769
									],
									[
										26973,
										26980
									],
									[
										27142,
										27149
									],
									[
										27169,
										27176
									],
									[
										27289,
										27296
									],
									[
										27459,
										27466
									],
									[
										27486,
										27493
									],
									[
										27696,
										27703
									],
									[
										27865,
										27872
									],
									[
										27892,
										27899
									],
									[
										28012,
										28019
									],
									[
										28182,
										28189
									],
									[
										28209,
										28216
									],
									[
										28419,
										28426
									],
									[
										28588,
										28595
									],
									[
										28615,
										28622
									],
									[
										28735,
										28742
									],
									[
										28905,
										28912
									],
									[
										28932,
										28939
									],
									[
										29142,
										29149
									],
									[
										29311,
										29318
									],
									[
										29338,
										29345
									],
									[
										29458,
										29465
									],
									[
										29628,
										29635
									],
									[
										29655,
										29662
									],
									[
										29865,
										29872
									],
									[
										30038,
										30045
									],
									[
										30065,
										30072
									],
									[
										30185,
										30192
									],
									[
										30359,
										30366
									],
									[
										30386,
										30393
									],
									[
										30596,
										30603
									],
									[
										30767,
										30774
									],
									[
										30794,
										30801
									],
									[
										30914,
										30921
									],
									[
										31085,
										31092
									],
									[
										31112,
										31119
									],
									[
										31258,
										31265
									],
									[
										31466,
										31473
									],
									[
										31491,
										31498
									],
									[
										31648,
										31655
									],
									[
										31849,
										31856
									],
									[
										31874,
										31881
									],
									[
										32083,
										32090
									],
									[
										32252,
										32259
									],
									[
										32279,
										32286
									],
									[
										32399,
										32406
									],
									[
										32569,
										32576
									],
									[
										32596,
										32603
									],
									[
										32806,
										32813
									],
									[
										32975,
										32982
									],
									[
										33002,
										33009
									],
									[
										33122,
										33129
									],
									[
										33292,
										33299
									],
									[
										33319,
										33326
									],
									[
										33529,
										33536
									],
									[
										33698,
										33705
									],
									[
										33725,
										33732
									],
									[
										33845,
										33852
									],
									[
										34015,
										34022
									],
									[
										34042,
										34049
									],
									[
										34252,
										34259
									],
									[
										34421,
										34428
									],
									[
										34448,
										34455
									],
									[
										34568,
										34575
									],
									[
										34738,
										34745
									],
									[
										34765,
										34772
									],
									[
										34975,
										34982
									],
									[
										35144,
										35151
									],
									[
										35171,
										35178
									],
									[
										35291,
										35298
									],
									[
										35461,
										35468
									],
									[
										35488,
										35495
									],
									[
										35698,
										35705
									],
									[
										35867,
										35874
									],
									[
										35894,
										35901
									],
									[
										36014,
										36021
									],
									[
										36184,
										36191
									],
									[
										36211,
										36218
									],
									[
										36421,
										36428
									],
									[
										36594,
										36601
									],
									[
										36621,
										36628
									],
									[
										36746,
										36753
									],
									[
										36919,
										36926
									],
									[
										36946,
										36953
									],
									[
										37097,
										37104
									],
									[
										37312,
										37319
									],
									[
										37337,
										37344
									],
									[
										37496,
										37503
									],
									[
										37697,
										37704
									],
									[
										37722,
										37729
									],
									[
										37933,
										37940
									],
									[
										38102,
										38109
									],
									[
										38129,
										38136
									],
									[
										38249,
										38256
									],
									[
										38419,
										38426
									],
									[
										38446,
										38453
									],
									[
										38656,
										38663
									],
									[
										38825,
										38832
									],
									[
										38852,
										38859
									],
									[
										38972,
										38979
									],
									[
										39142,
										39149
									],
									[
										39169,
										39176
									],
									[
										39379,
										39386
									],
									[
										39548,
										39555
									],
									[
										39575,
										39582
									],
									[
										39695,
										39702
									],
									[
										39865,
										39872
									],
									[
										39892,
										39899
									],
									[
										40102,
										40109
									],
									[
										40271,
										40278
									],
									[
										40298,
										40305
									],
									[
										40418,
										40425
									],
									[
										40588,
										40595
									],
									[
										40615,
										40622
									],
									[
										40825,
										40832
									],
									[
										40994,
										41001
									],
									[
										41021,
										41028
									],
									[
										41141,
										41148
									],
									[
										41311,
										41318
									],
									[
										41338,
										41345
									],
									[
										41548,
										41555
									],
									[
										41717,
										41724
									],
									[
										41744,
										41751
									],
									[
										41864,
										41871
									],
									[
										42034,
										42041
									],
									[
										42061,
										42068
									],
									[
										42271,
										42278
									],
									[
										42440,
										42447
									],
									[
										42467,
										42474
									],
									[
										42587,
										42594
									],
									[
										42757,
										42764
									],
									[
										42784,
										42791
									],
									[
										42994,
										43001
									],
									[
										43163,
										43170
									],
									[
										43190,
										43197
									],
									[
										43310,
										43317
									],
									[
										43480,
										43487
									],
									[
										43507,
										43514
									],
									[
										43717,
										43724
									],
									[
										43886,
										43893
									],
									[
										43913,
										43920
									],
									[
										44033,
										44040
									],
									[
										44203,
										44210
									],
									[
										44230,
										44237
									],
									[
										44440,
										44447
									],
									[
										44609,
										44616
									],
									[
										44636,
										44643
									],
									[
										44756,
										44763
									],
									[
										44926,
										44933
									],
									[
										44953,
										44960
									],
									[
										45163,
										45170
									],
									[
										45332,
										45339
									],
									[
										45359,
										45366
									],
									[
										45479,
										45486
									],
									[
										45649,
										45656
									],
									[
										45676,
										45683
									],
									[
										45886,
										45893
									],
									[
										46055,
										46062
									],
									[
										46082,
										46089
									],
									[
										46202,
										46209
									],
									[
										46372,
										46379
									],
									[
										46399,
										46406
									],
									[
										46609,
										46616
									],
									[
										46778,
										46785
									],
									[
										46805,
										46812
									],
									[
										46925,
										46932
									],
									[
										47095,
										47102
									],
									[
										47122,
										47129
									],
									[
										47332,
										47339
									],
									[
										47501,
										47508
									],
									[
										47528,
										47535
									],
									[
										47648,
										47655
									],
									[
										47818,
										47825
									],
									[
										47845,
										47852
									],
									[
										48055,
										48062
									],
									[
										48224,
										48231
									],
									[
										48251,
										48258
									],
									[
										48371,
										48378
									],
									[
										48541,
										48548
									],
									[
										48568,
										48575
									],
									[
										48778,
										48785
									],
									[
										48947,
										48954
									],
									[
										48974,
										48981
									],
									[
										49094,
										49101
									],
									[
										49264,
										49271
									],
									[
										49291,
										49298
									],
									[
										49501,
										49508
									],
									[
										49674,
										49681
									],
									[
										49701,
										49708
									],
									[
										49821,
										49828
									],
									[
										49995,
										50002
									],
									[
										50022,
										50029
									],
									[
										50228,
										50235
									],
									[
										50397,
										50404
									],
									[
										50424,
										50431
									],
									[
										50544,
										50551
									],
									[
										50714,
										50721
									],
									[
										50741,
										50748
									],
									[
										50951,
										50958
									],
									[
										51120,
										51127
									],
									[
										51147,
										51154
									],
									[
										51267,
										51274
									],
									[
										51437,
										51444
									],
									[
										51464,
										51471
									],
									[
										51674,
										51681
									],
									[
										51843,
										51850
									],
									[
										51870,
										51877
									],
									[
										51990,
										51997
									],
									[
										52160,
										52167
									],
									[
										52187,
										52194
									],
									[
										52397,
										52404
									],
									[
										52566,
										52573
									],
									[
										52593,
										52600
									],
									[
										52713,
										52720
									],
									[
										52883,
										52890
									],
									[
										52910,
										52917
									],
									[
										53120,
										53127
									],
									[
										53289,
										53296
									],
									[
										53316,
										53323
									],
									[
										53436,
										53443
									],
									[
										53606,
										53613
									],
									[
										53633,
										53640
									],
									[
										53843,
										53850
									],
									[
										54012,
										54019
									],
									[
										54039,
										54046
									],
									[
										54159,
										54166
									],
									[
										54329,
										54336
									],
									[
										54356,
										54363
									],
									[
										54566,
										54573
									],
									[
										54735,
										54742
									],
									[
										54762,
										54769
									],
									[
										54882,
										54889
									],
									[
										55052,
										55059
									],
									[
										55079,
										55086
									],
									[
										55289,
										55296
									],
									[
										55463,
										55470
									],
									[
										55490,
										55497
									],
									[
										55611,
										55618
									],
									[
										55786,
										55793
									],
									[
										55813,
										55820
									],
									[
										56024,
										56031
									],
									[
										56197,
										56204
									],
									[
										56224,
										56231
									],
									[
										56344,
										56351
									],
									[
										56518,
										56525
									],
									[
										56545,
										56552
									],
									[
										56836,
										56843
									],
									[
										57002,
										57009
									],
									[
										57029,
										57036
									],
									[
										57146,
										57153
									],
									[
										57313,
										57320
									],
									[
										57340,
										57347
									],
									[
										57544,
										57551
									],
									[
										57710,
										57717
									],
									[
										57737,
										57744
									],
									[
										57854,
										57861
									],
									[
										58021,
										58028
									],
									[
										58048,
										58055
									],
									[
										58252,
										58259
									],
									[
										58418,
										58425
									],
									[
										58445,
										58452
									],
									[
										58562,
										58569
									],
									[
										58729,
										58736
									],
									[
										58756,
										58763
									],
									[
										58897,
										58904
									],
									[
										59100,
										59107
									],
									[
										59125,
										59132
									],
									[
										59277,
										59284
									],
									[
										59473,
										59480
									],
									[
										59498,
										59505
									],
									[
										59701,
										59708
									],
									[
										59867,
										59874
									],
									[
										59894,
										59901
									],
									[
										60011,
										60018
									],
									[
										60178,
										60185
									],
									[
										60205,
										60212
									],
									[
										60409,
										60416
									],
									[
										60575,
										60582
									],
									[
										60602,
										60609
									],
									[
										60719,
										60726
									],
									[
										60886,
										60893
									],
									[
										60913,
										60920
									],
									[
										61117,
										61124
									],
									[
										61283,
										61290
									],
									[
										61310,
										61317
									],
									[
										61427,
										61434
									],
									[
										61594,
										61601
									],
									[
										61621,
										61628
									],
									[
										61825,
										61832
									],
									[
										61991,
										61998
									],
									[
										62018,
										62025
									],
									[
										62135,
										62142
									],
									[
										62302,
										62309
									],
									[
										62329,
										62336
									],
									[
										62533,
										62540
									],
									[
										62699,
										62706
									],
									[
										62726,
										62733
									],
									[
										62843,
										62850
									],
									[
										63010,
										63017
									],
									[
										63037,
										63044
									],
									[
										63241,
										63248
									],
									[
										63407,
										63414
									],
									[
										63434,
										63441
									],
									[
										63551,
										63558
									],
									[
										63718,
										63725
									],
									[
										63745,
										63752
									],
									[
										63928,
										63935
									],
									[
										64094,
										64101
									],
									[
										64121,
										64128
									],
									[
										64238,
										64245
									],
									[
										64405,
										64412
									],
									[
										64432,
										64439
									],
									[
										64636,
										64643
									],
									[
										64802,
										64809
									],
									[
										64829,
										64836
									],
									[
										64946,
										64953
									],
									[
										65113,
										65120
									],
									[
										65140,
										65147
									],
									[
										65344,
										65351
									],
									[
										65510,
										65517
									],
									[
										65537,
										65544
									],
									[
										65654,
										65661
									],
									[
										65821,
										65828
									],
									[
										65848,
										65855
									],
									[
										66052,
										66059
									],
									[
										66218,
										66225
									],
									[
										66245,
										66252
									],
									[
										66362,
										66369
									],
									[
										66529,
										66536
									],
									[
										66556,
										66563
									],
									[
										66760,
										66767
									],
									[
										66926,
										66933
									],
									[
										66953,
										66960
									],
									[
										67070,
										67077
									],
									[
										67237,
										67244
									],
									[
										67264,
										67271
									],
									[
										67464,
										67471
									],
									[
										67630,
										67637
									],
									[
										67657,
										67664
									],
									[
										67774,
										67781
									],
									[
										67941,
										67948
									],
									[
										67968,
										67975
									],
									[
										68172,
										68179
									],
									[
										68331,
										68338
									],
									[
										68356,
										68363
									],
									[
										68472,
										68479
									],
									[
										68632,
										68639
									],
									[
										68657,
										68664
									],
									[
										68860,
										68867
									],
									[
										69026,
										69033
									],
									[
										69053,
										69060
									],
									[
										69170,
										69177
									],
									[
										69337,
										69344
									],
									[
										69364,
										69371
									],
									[
										69568,
										69575
									],
									[
										69734,
										69741
									],
									[
										69761,
										69768
									],
									[
										69878,
										69885
									],
									[
										70045,
										70052
									],
									[
										70072,
										70079
									],
									[
										70276,
										70283
									],
									[
										70442,
										70449
									],
									[
										70469,
										70476
									],
									[
										70586,
										70593
									],
									[
										70753,
										70760
									],
									[
										70780,
										70787
									],
									[
										70984,
										70991
									],
									[
										71150,
										71157
									],
									[
										71177,
										71184
									],
									[
										71294,
										71301
									],
									[
										71461,
										71468
									],
									[
										71488,
										71495
									],
									[
										71692,
										71699
									],
									[
										71858,
										71865
									],
									[
										71885,
										71892
									],
									[
										72002,
										72009
									],
									[
										72169,
										72176
									],
									[
										72196,
										72203
									],
									[
										72400,
										72407
									],
									[
										72566,
										72573
									],
									[
										72593,
										72600
									],
									[
										72710,
										72717
									],
									[
										72877,
										72884
									],
									[
										72904,
										72911
									],
									[
										73108,
										73115
									],
									[
										73274,
										73281
									],
									[
										73301,
										73308
									],
									[
										73418,
										73425
									],
									[
										73585,
										73592
									],
									[
										73612,
										73619
									],
									[
										73816,
										73823
									],
									[
										73982,
										73989
									],
									[
										74009,
										74016
									],
									[
										74126,
										74133
									],
									[
										74293,
										74300
									],
									[
										74320,
										74327
									],
									[
										74524,
										74531
									],
									[
										74694,
										74701
									],
									[
										74721,
										74728
									],
									[
										74844,
										74851
									],
									[
										75016,
										75023
									],
									[
										75043,
										75050
									],
									[
										75255,
										75262
									],
									[
										75424,
										75431
									],
									[
										75451,
										75458
									],
									[
										75571,
										75578
									],
									[
										75741,
										75748
									],
									[
										75768,
										75775
									],
									[
										75978,
										75985
									],
									[
										76147,
										76154
									],
									[
										76174,
										76181
									],
									[
										76294,
										76301
									],
									[
										76464,
										76471
									],
									[
										76491,
										76498
									],
									[
										76701,
										76708
									],
									[
										76878,
										76885
									],
									[
										76905,
										76912
									],
									[
										77035,
										77042
									],
									[
										77214,
										77221
									],
									[
										77241,
										77248
									],
									[
										77456,
										77463
									],
									[
										77625,
										77632
									],
									[
										77652,
										77659
									],
									[
										77772,
										77779
									],
									[
										77942,
										77949
									],
									[
										77969,
										77976
									],
									[
										78175,
										78182
									],
									[
										78344,
										78351
									],
									[
										78371,
										78378
									],
									[
										78491,
										78498
									],
									[
										78661,
										78668
									],
									[
										78688,
										78695
									],
									[
										78898,
										78905
									],
									[
										79067,
										79074
									],
									[
										79094,
										79101
									],
									[
										79214,
										79221
									],
									[
										79384,
										79391
									],
									[
										79411,
										79418
									],
									[
										79621,
										79628
									],
									[
										79790,
										79797
									],
									[
										79817,
										79824
									],
									[
										79937,
										79944
									],
									[
										80107,
										80114
									],
									[
										80134,
										80141
									],
									[
										80344,
										80351
									],
									[
										80513,
										80520
									],
									[
										80540,
										80547
									],
									[
										80660,
										80667
									],
									[
										80830,
										80837
									],
									[
										80857,
										80864
									],
									[
										81067,
										81074
									],
									[
										81236,
										81243
									],
									[
										81263,
										81270
									],
									[
										81383,
										81390
									],
									[
										81553,
										81560
									],
									[
										81580,
										81587
									],
									[
										81790,
										81797
									],
									[
										81959,
										81966
									],
									[
										81986,
										81993
									],
									[
										82106,
										82113
									],
									[
										82276,
										82283
									],
									[
										82303,
										82310
									],
									[
										82513,
										82520
									],
									[
										82680,
										82687
									],
									[
										82707,
										82714
									],
									[
										82831,
										82838
									],
									[
										82996,
										83003
									],
									[
										83023,
										83030
									],
									[
										83234,
										83241
									],
									[
										83403,
										83410
									],
									[
										83430,
										83437
									],
									[
										83550,
										83557
									],
									[
										83720,
										83727
									],
									[
										83747,
										83754
									],
									[
										83957,
										83964
									],
									[
										84126,
										84133
									],
									[
										84153,
										84160
									],
									[
										84273,
										84280
									],
									[
										84443,
										84450
									],
									[
										84470,
										84477
									],
									[
										84680,
										84687
									],
									[
										84849,
										84856
									],
									[
										84876,
										84883
									],
									[
										84996,
										85003
									],
									[
										85166,
										85173
									],
									[
										85193,
										85200
									],
									[
										85403,
										85410
									],
									[
										85572,
										85579
									],
									[
										85599,
										85606
									],
									[
										85719,
										85726
									],
									[
										85889,
										85896
									],
									[
										85916,
										85923
									],
									[
										86126,
										86133
									],
									[
										86299,
										86306
									],
									[
										86326,
										86333
									],
									[
										86446,
										86453
									],
									[
										86620,
										86627
									],
									[
										86647,
										86654
									],
									[
										86857,
										86864
									],
									[
										87028,
										87035
									],
									[
										87055,
										87062
									],
									[
										87175,
										87182
									],
									[
										87346,
										87353
									],
									[
										87373,
										87380
									],
									[
										87519,
										87526
									],
									[
										87727,
										87734
									],
									[
										87752,
										87759
									],
									[
										87909,
										87916
									],
									[
										88110,
										88117
									],
									[
										88135,
										88142
									],
									[
										88344,
										88351
									],
									[
										88513,
										88520
									],
									[
										88540,
										88547
									],
									[
										88660,
										88667
									],
									[
										88830,
										88837
									],
									[
										88857,
										88864
									],
									[
										89067,
										89074
									],
									[
										89236,
										89243
									],
									[
										89263,
										89270
									],
									[
										89383,
										89390
									],
									[
										89553,
										89560
									],
									[
										89580,
										89587
									],
									[
										89790,
										89797
									],
									[
										89959,
										89966
									],
									[
										89986,
										89993
									],
									[
										90106,
										90113
									],
									[
										90276,
										90283
									],
									[
										90303,
										90310
									],
									[
										90513,
										90520
									],
									[
										90682,
										90689
									],
									[
										90709,
										90716
									],
									[
										90829,
										90836
									],
									[
										90999,
										91006
									],
									[
										91026,
										91033
									],
									[
										91236,
										91243
									],
									[
										91405,
										91412
									],
									[
										91432,
										91439
									],
									[
										91552,
										91559
									],
									[
										91722,
										91729
									],
									[
										91749,
										91756
									],
									[
										91959,
										91966
									],
									[
										92128,
										92135
									],
									[
										92155,
										92162
									],
									[
										92275,
										92282
									],
									[
										92445,
										92452
									],
									[
										92472,
										92479
									],
									[
										92682,
										92689
									],
									[
										92855,
										92862
									],
									[
										92882,
										92889
									],
									[
										93007,
										93014
									],
									[
										93180,
										93187
									],
									[
										93207,
										93214
									],
									[
										93358,
										93365
									],
									[
										93573,
										93580
									],
									[
										93598,
										93605
									],
									[
										93757,
										93764
									],
									[
										93958,
										93965
									],
									[
										93983,
										93990
									],
									[
										94194,
										94201
									],
									[
										94363,
										94370
									],
									[
										94390,
										94397
									],
									[
										94510,
										94517
									],
									[
										94680,
										94687
									],
									[
										94707,
										94714
									],
									[
										94917,
										94924
									],
									[
										95086,
										95093
									],
									[
										95113,
										95120
									],
									[
										95233,
										95240
									],
									[
										95403,
										95410
									],
									[
										95430,
										95437
									],
									[
										95640,
										95647
									],
									[
										95809,
										95816
									],
									[
										95836,
										95843
									],
									[
										95956,
										95963
									],
									[
										96126,
										96133
									],
									[
										96153,
										96160
									],
									[
										96363,
										96370
									],
									[
										96532,
										96539
									],
									[
										96559,
										96566
									],
									[
										96679,
										96686
									],
									[
										96849,
										96856
									],
									[
										96876,
										96883
									],
									[
										97086,
										97093
									],
									[
										97255,
										97262
									],
									[
										97282,
										97289
									],
									[
										97402,
										97409
									],
									[
										97572,
										97579
									],
									[
										97599,
										97606
									],
									[
										97809,
										97816
									],
									[
										97978,
										97985
									],
									[
										98005,
										98012
									],
									[
										98125,
										98132
									],
									[
										98295,
										98302
									],
									[
										98322,
										98329
									],
									[
										98532,
										98539
									],
									[
										98701,
										98708
									],
									[
										98728,
										98735
									],
									[
										98848,
										98855
									],
									[
										99018,
										99025
									],
									[
										99045,
										99052
									],
									[
										99255,
										99262
									],
									[
										99424,
										99431
									],
									[
										99451,
										99458
									],
									[
										99571,
										99578
									],
									[
										99741,
										99748
									],
									[
										99768,
										99775
									],
									[
										99978,
										99985
									],
									[
										100147,
										100154
									],
									[
										100174,
										100181
									],
									[
										100294,
										100301
									],
									[
										100464,
										100471
									],
									[
										100491,
										100498
									],
									[
										100701,
										100708
									],
									[
										100870,
										100877
									],
									[
										100897,
										100904
									],
									[
										101017,
										101024
									],
									[
										101187,
										101194
									],
									[
										101214,
										101221
									],
									[
										101424,
										101431
									],
									[
										101593,
										101600
									],
									[
										101620,
										101627
									],
									[
										101740,
										101747
									],
									[
										101910,
										101917
									],
									[
										101937,
										101944
									],
									[
										102147,
										102154
									],
									[
										102316,
										102323
									],
									[
										102343,
										102350
									],
									[
										102463,
										102470
									],
									[
										102633,
										102640
									],
									[
										102660,
										102667
									],
									[
										102870,
										102877
									],
									[
										103039,
										103046
									],
									[
										103066,
										103073
									],
									[
										103186,
										103193
									],
									[
										103356,
										103363
									],
									[
										103383,
										103390
									],
									[
										103593,
										103600
									],
									[
										103762,
										103769
									],
									[
										103789,
										103796
									],
									[
										103909,
										103916
									],
									[
										104079,
										104086
									],
									[
										104106,
										104113
									],
									[
										104316,
										104323
									],
									[
										104485,
										104492
									],
									[
										104512,
										104519
									],
									[
										104632,
										104639
									],
									[
										104802,
										104809
									],
									[
										104829,
										104836
									],
									[
										105039,
										105046
									],
									[
										105208,
										105215
									],
									[
										105235,
										105242
									],
									[
										105355,
										105362
									],
									[
										105525,
										105532
									],
									[
										105552,
										105559
									],
									[
										105762,
										105769
									],
									[
										105935,
										105942
									],
									[
										105962,
										105969
									],
									[
										106082,
										106089
									],
									[
										106256,
										106263
									],
									[
										106283,
										106290
									],
									[
										106489,
										106496
									],
									[
										106658,
										106665
									],
									[
										106685,
										106692
									],
									[
										106805,
										106812
									],
									[
										106975,
										106982
									],
									[
										107002,
										107009
									],
									[
										107212,
										107219
									],
									[
										107381,
										107388
									],
									[
										107408,
										107415
									],
									[
										107528,
										107535
									],
									[
										107698,
										107705
									],
									[
										107725,
										107732
									],
									[
										107935,
										107942
									],
									[
										108104,
										108111
									],
									[
										108131,
										108138
									],
									[
										108251,
										108258
									],
									[
										108421,
										108428
									],
									[
										108448,
										108455
									],
									[
										108658,
										108665
									],
									[
										108827,
										108834
									],
									[
										108854,
										108861
									],
									[
										108974,
										108981
									],
									[
										109144,
										109151
									],
									[
										109171,
										109178
									],
									[
										109381,
										109388
									],
									[
										109550,
										109557
									],
									[
										109577,
										109584
									],
									[
										109697,
										109704
									],
									[
										109867,
										109874
									],
									[
										109894,
										109901
									],
									[
										110104,
										110111
									],
									[
										110273,
										110280
									],
									[
										110300,
										110307
									],
									[
										110420,
										110427
									],
									[
										110590,
										110597
									],
									[
										110617,
										110624
									],
									[
										110827,
										110834
									],
									[
										110996,
										111003
									],
									[
										111023,
										111030
									],
									[
										111143,
										111150
									],
									[
										111313,
										111320
									],
									[
										111340,
										111347
									],
									[
										111550,
										111557
									],
									[
										111724,
										111731
									],
									[
										111751,
										111758
									],
									[
										111872,
										111879
									],
									[
										112047,
										112054
									],
									[
										112074,
										112081
									],
									[
										112285,
										112292
									],
									[
										112458,
										112465
									],
									[
										112485,
										112492
									],
									[
										112605,
										112612
									],
									[
										112779,
										112786
									],
									[
										112806,
										112813
									],
									[
										113340,
										113347
									],
									[
										113783,
										113790
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								258,
								258
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "app/scripts/app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13460,
						"regions":
						{
						},
						"selection":
						[
							[
								9935,
								9935
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6732.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "app/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5128,
						"regions":
						{
						},
						"selection":
						[
							[
								4244,
								4244
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1476.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.704723048417,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 247.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-commit":
	{
		"height": 112.0
	},
	"output.git-fetch":
	{
		"height": 112.0
	},
	"output.git-flow-init":
	{
		"height": 0.0
	},
	"output.git-init":
	{
		"height": 112.0
	},
	"output.git-pull":
	{
		"height": 184.0
	},
	"output.git-push":
	{
		"height": 112.0
	},
	"output.git-remote":
	{
		"height": 112.0
	},
	"output.unsaved_changes":
	{
		"height": 119.0
	},
	"pinned_build_system": "",
	"project": "sb-admin-angular.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				".jshi",
				".jshintrc"
			],
			[
				"grunt",
				"Gruntfile.js"
			],
			[
				"pendientes",
				"app/pedidos/views/pedidos.pendientes.html"
			],
			[
				"clientes.ht",
				"app/clientes/views/main.html"
			],
			[
				"app",
				"app/scripts/app.js"
			],
			[
				"sb-a",
				"app/js/sb-admin-2.js"
			],
			[
				"princ",
				"app/security/services/Principal.js"
			],
			[
				"auth",
				"app/security/services/Authorization.js"
			],
			[
				"login",
				"app/security/services/loginInterceptor.js"
			],
			[
				"inde",
				"app/index.html"
			],
			[
				"api",
				"app/scripts/services/ApiHost.js"
			],
			[
				"bowe",
				"bower.json"
			],
			[
				"read",
				"README.md"
			],
			[
				"ver",
				"app/pedidos/views/modals/ver-pedido-modal.html"
			],
			[
				"crear",
				"app/clientes/views/modals/crear-cliente-modal.html"
			],
			[
				"pedidos",
				"app/pedidos/js/controllers/PedidosCtrl.js"
			],
			[
				"pedidospe",
				"app/pedidos/js/controllers/PedidosPendientesCtrl.js"
			],
			[
				"from",
				"app/pedidos/js/filters/FromNow.js"
			],
			[
				"tarje",
				"app/pedidos/js/directives/TarjetaPedido.js"
			],
			[
				"pla",
				"app/productos/views/platos.html"
			],
			[
				"beb",
				"app/productos/views/bebidas.html"
			],
			[
				"prin",
				"app/security/services/Principal.js"
			],
			[
				"",
				"app/scripts/app.js"
			],
			[
				"bo",
				"bower.json"
			],
			[
				"princi",
				"app/security/services/Principal.js"
			],
			[
				"loginc",
				"app/security/controllers/LoginCtrl.js"
			],
			[
				"index",
				"app/index.html"
			],
			[
				"authori",
				"app/security/services/Authorization.js"
			],
			[
				"gru",
				"Gruntfile.js"
			],
			[
				"ped",
				"app/pedidos/views/pedidos.pendientes.html"
			],
			[
				"main",
				"app/scripts/controllers/main.js"
			],
			[
				"form.js",
				"app/scripts/controllers/form.js"
			],
			[
				"grun",
				"Gruntfile.js"
			],
			[
				"side",
				"app/scripts/directives/sidebar/sidebar.html"
			],
			[
				"pedido",
				"app/pedidos/js/services/Pedido.js"
			],
			[
				"bower",
				"bower.json"
			],
			[
				"lista",
				"app/pedidos/js/controllers/ListaPedidosCtrl.js"
			],
			[
				"chart",
				"bower_components/angular-chart.js/angular-chart.js"
			],
			[
				"pedi",
				"app/views/pedidos/pedidos.html"
			],
			[
				"boot",
				"bower_components/bootstrap/dist/css/bootstrap.css"
			],
			[
				"clientes",
				"app/views/clientes/main.html"
			],
			[
				"boots",
				"bower_components/bootstrap/dist/css/bootstrap.css"
			],
			[
				"ap",
				"app/scripts/app.js"
			],
			[
				"bebids",
				"app/views/productos/bebidas.html"
			],
			[
				"bebidas",
				"app/scripts/controllers/BebidasCtrl.js"
			],
			[
				"angular-cha",
				"bower_components/angular-chart.js/angular-chart.js"
			],
			[
				"packa",
				"package.json"
			],
			[
				"video.js",
				"bower_components/video.js/dist/video-js/video.dev.js"
			],
			[
				"selec",
				"bower_components/angular-ui-select/dist/select.css"
			],
			[
				"todo",
				"app/scripts/controllers/todo.js"
			],
			[
				"ngl",
				"bower_components/ng-lodash/build/ng-lodash.js"
			],
			[
				"calc",
				"app/scripts/controllers/calc.js"
			],
			[
				"lis",
				"slides/list.json"
			],
			[
				"revea",
				"bower_components/reveal.js/css/reveal.css"
			],
			[
				"depe",
				"slides/dependency-injection-2.html"
			],
			[
				"li",
				"slides/list.json"
			],
			[
				"refere",
				"slides/referencias.html"
			],
			[
				"conteni",
				"slides/contenido.html"
			],
			[
				"controll",
				"slides/controllers-2-way-data-binding.html"
			],
			[
				".js",
				".jshintrc"
			],
			[
				"_",
				"templates/_index.html"
			],
			[
				"revel",
				"bower_components/reveal.js/css/reveal.css"
			],
			[
				"ng",
				"bower_components/ng-grid/build/ng-grid.js"
			],
			[
				"clie",
				"app/scripts/controllers/ClienteCtrl.js"
			],
			[
				"angu",
				"bower_components/angular-chart.js/angular-chart.js"
			],
			[
				"chart.",
				"app/views/chart.html"
			],
			[
				"ocla",
				"bower_components/oclazyload/dist/ocLazyLoad.js"
			],
			[
				"chartcon",
				"app/scripts/controllers/chartContoller.js"
			],
			[
				"met",
				"slides/metas-de-diseno.html"
			],
			[
				"meta",
				"slides/metas-de-diseno.md"
			],
			[
				"ini",
				"slides/inicio.html"
			],
			[
				"ind",
				"slides/introduccion.md"
			],
			[
				"sectin",
				"templates/_section.html"
			],
			[
				"ejempl",
				"slides/ejemplo-hello-world.md"
			],
			[
				"metas",
				"slides/metas-de-diseno.md"
			],
			[
				"in",
				"index.html"
			],
			[
				"eje",
				"slides/ejemplo-hello-world-cont.md"
			],
			[
				"conte",
				"slides/contenido.md"
			],
			[
				"con",
				"slides/contenido-cont.md"
			],
			[
				"list",
				"slides/list.json"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/switch/simple-angular-app/simple-app.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 291.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
